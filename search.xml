<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>冒泡排序</title>
    <url>/2020/10/25/BubbleSort/</url>
    <content><![CDATA[<p>冒泡排序（英语：Bubble Sort）又称为泡式排序，是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误&gt;就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”&gt;到数列的顶端。</p>
<a id="more"></a>


<h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><blockquote>
<p>依次比较两个相邻的元素，如果它们顺序错误，则交换，最终大数会沉向尾部。重复上面的步骤知道数组有序，下面以正序为例进行详细说明整个过程。</p>
</blockquote>
<p>原数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<span class="hljs-number">9</span>] [<span class="hljs-number">8</span>] [<span class="hljs-number">7</span>] [<span class="hljs-number">1</span>] [<span class="hljs-number">3</span>] [<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure>

<p>第一步：比较<font color="red">[9]</font>和<font color="red">[8]</font>，由于<font color="red">[9]</font>大于<font color="red">[8]</font>，按照正序逻辑<font color="red">[9]</font>在后面，因此需要交换它们的位置，得到新的数组如下所示。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<span class="hljs-number">8</span>] [<span class="hljs-number">9</span>] [<span class="hljs-number">7</span>] [<span class="hljs-number">1</span>] [<span class="hljs-number">3</span>] [<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure>

<p>第二步：比较比较<font color="red">[9]</font>和<font color="red">[7]</font>，同理需要交换它们的位置，得到新的数组如下所示。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<span class="hljs-number">8</span>] [<span class="hljs-number">7</span>] [<span class="hljs-number">9</span>] [<span class="hljs-number">1</span>] [<span class="hljs-number">3</span>] [<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure>

<p>依次比较原理同上，直到最后一组元素相邻元素比较之后，我们可以得到第一轮冒泡之后的结果，如下所示，可以很明显看到元素<font color="red">[9]</font>最终沉到了尾部，因为它是正序里面最大的结果。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<span class="hljs-number">8</span>] [<span class="hljs-number">7</span>] [<span class="hljs-number">1</span>] [<span class="hljs-number">3</span>] [<span class="hljs-number">5</span>] [<span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure>

<p>同理我们进行第二轮冒泡，会将<font color="red">[8]</font>沉到元素尾部，得到如下结果，这里需要注意，由于第一轮冒泡，已经把最大的元素<font color="red">[9]</font>放到了最后一个位置，第二轮冒泡则无需和<font color="red">[9]</font>进行比较，就可以把<font color="red">[8]</font>放到倒数第二的位置。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<span class="hljs-number">7</span>] [<span class="hljs-number">1</span>] [<span class="hljs-number">3</span>] [<span class="hljs-number">5</span>] [<span class="hljs-number">8</span>] [<span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure>

<p>最终在经过了n-1轮冒泡之后（n为元素个数），我们可以最终得到一个有序的数组。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<span class="hljs-number">1</span>] [<span class="hljs-number">3</span>] [<span class="hljs-number">5</span>] [<span class="hljs-number">7</span>] [<span class="hljs-number">8</span>] [<span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure>



<h2 id="时间与空间复杂度"><a href="#时间与空间复杂度" class="headerlink" title="时间与空间复杂度"></a>时间与空间复杂度</h2><blockquote>
<p>冒泡排序是稳定的排序算法，其时间复杂度计算公式如下。可以看到冒泡排序，最好的情况与最坏的情况下，时间复杂度均为2^n，空间复杂度为1，平均时间复杂度为2^n。</p>
</blockquote>
<p>$$<br>(n-1) + (n-2) + (n-3) + … + 1 &#x3D; ((n-1) + 1) * (n-1) &#x2F; 2 &#x3D; \frac{n * (n-1)}{2}<br>$$</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote>
<p>less函数与exch函数参见文章排序算法序言。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubble</span><span class="hljs-params">(Comparable[] c)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> N = c.length;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; N-<span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; N-i-<span class="hljs-number">1</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(less(c[j+<span class="hljs-number">1</span>], c[j]))&#123;<br>                exch(c, j, j+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>冒泡排序</tag>
        <tag>数据结构与算法</tag>
        <tag>稳定排序</tag>
      </tags>
  </entry>
  <entry>
    <title>希尔排序</title>
    <url>/2020/10/28/HillSort/</url>
    <content><![CDATA[<p>希尔排序（Shellsort），也称递减增量排序算法，是插入排序的一种更高效的改进版本。根据设计者希尔（Donald Shell）的名字命名，该算法由1959年公布。</p>
<a id="more"></a>


<h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><blockquote>
<p>假定步长为h，则把数组分为h组，从前往后间隔h的元素为一组。先在组内进行插入排序，保证每个组内是有序的，再按照步长为1进行一次全面插入排序，从而得到有序数组。</p>
</blockquote>
<p>原数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[9] [8] [7] [1] [3] [5]<br></code></pre></td></tr></table></figure>

<p>第一步，假设h为<code>3</code>，则根据规则原数组分为如下三组</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[9] [1]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[8] [3]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[7] [5]<br></code></pre></td></tr></table></figure>

<p>第二步，在三个小组内，分别进行插入排序，得到三个有序子数组。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [9]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[3] [8]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[5] [7]<br></code></pre></td></tr></table></figure>

<p>第三步，三个子数组按照原来的位置存放，得到第一轮排序后的数组。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [5] [9] [8] [7]<br></code></pre></td></tr></table></figure>

<p>第四步，按照步长为<code>[1]</code>进行一次插入排序，即可得到有序数组。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [5] [7] [8] [9]<br></code></pre></td></tr></table></figure>



<h2 id="时间与空间复杂度"><a href="#时间与空间复杂度" class="headerlink" title="时间与空间复杂度"></a>时间与空间复杂度</h2><blockquote>
<p>希尔排序是一个不稳定的排序算法，其最好情况下时间复杂度为<code>O(n)</code>，最坏情况下时间复杂度为<code>2^n</code>，平均时间复杂度为<code>2^n</code>，空间复杂度为<code>O(!)</code>。时间复杂度计算公式如下。</p>
</blockquote>
<p>$$<br>待补充<br>$$</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Shell</span><span class="hljs-params">(Comparable[] c)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> N = c.length;<br>    <span class="hljs-keyword">int</span> h = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(h &lt; N / <span class="hljs-number">3</span>)&#123;<br>        h = <span class="hljs-number">3</span> * h + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (h &gt;= <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = h; i &lt; N; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &gt;= h &amp;&amp; less(c[j], c[j-h]); j -= h)&#123;<br>                exch(c, j, j-h);<br>            &#125;<br>        &#125;<br>        h = h / <span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构与算法</tag>
        <tag>希尔排序</tag>
        <tag>不稳定排序</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/2020/10/25/InsertSort/</url>
    <content><![CDATA[<p>插入排序（英语：Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐&gt;步向后挪位，为最新元素提供插入空间。</p>
<a id="more"></a>

<h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><blockquote>
<p>每次从剩余的未排序的元素中选取一个元素插入到前面已排序的元素中，使整体有序。下面以正序为例说明整个过程。</p>
</blockquote>
<p>原数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<span class="hljs-number">9</span>] [<span class="hljs-number">8</span>] [<span class="hljs-number">7</span>] [<span class="hljs-number">1</span>] [<span class="hljs-number">3</span>] [<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure>

<p>第一步：选择<font color="red">[9]</font>插入到前面已排序的元素中，由于是第一个元素，已经排序好了。可以看到结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[9] [8] [7] [1] [3] [5]<br></code></pre></td></tr></table></figure>

<p>未排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[8] [7] [1] [3] [5]<br></code></pre></td></tr></table></figure>

<p>已排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[9]<br></code></pre></td></tr></table></figure>

<p>第二步：选择<font color="red">[8]</font>插入到前面已排序的元素中，<font color="red">[8]</font>比<font color="red">[9]</font>小，因此在<font color="red">[9]</font>前面，可以看到结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[8] [9] [7] [1] [3] [5]<br></code></pre></td></tr></table></figure>

<p>未排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[7] [1] [3] [5]<br></code></pre></td></tr></table></figure>

<p>已排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[8] [9]<br></code></pre></td></tr></table></figure>

<p>第三步：选择<font color="red">[7]</font>插入到前面已排序的元素中，<font color="red">[7]</font>比<font color="red">[8]</font>小，因此在<font color="red">[8]</font>前面，可以看到结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[7] [8] [9] [1] [3] [5]<br></code></pre></td></tr></table></figure>

<p>未排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [5]<br></code></pre></td></tr></table></figure>

<p>已排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[7] [8] [9]<br></code></pre></td></tr></table></figure>

<p>第四步：选择<font color="red">[1]</font>插入到前面已排序的元素中，<font color="red">[1]</font>比<font color="red">[7]</font>小，因此在<font color="red">[7]</font>前面，可以看到结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [7] [8] [9] [3] [5]<br></code></pre></td></tr></table></figure>

<p>未排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[3] [5]<br></code></pre></td></tr></table></figure>

<p>已排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [7] [8] [9]<br></code></pre></td></tr></table></figure>

<p>第五步：选择<font color="red">[3]</font>插入到前面已排序的元素中，<font color="red">[3]</font>小于<font color="red">[7]</font>大于<font color="red">[1]</font>，因此<font color="red">[3]</font>在<font color="red">[1]</font>和<font color="red">[7]</font>之间，可以看到结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [7] [8] [9] [5]<br></code></pre></td></tr></table></figure>

<p>未排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[5]<br></code></pre></td></tr></table></figure>

<p>已排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [7] [8] [9]<br></code></pre></td></tr></table></figure>

<p>第六步：同理插入<font color="red">[5]</font>，可以看到结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [5] [7] [8] [9]<br></code></pre></td></tr></table></figure>

<p>未排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><br></code></pre></td></tr></table></figure>

<p>已排序</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [5] [7] [8] [9]<br></code></pre></td></tr></table></figure>

<p>最终得到一个正序数组。</p>
<h2 id="时间与空间复杂度"><a href="#时间与空间复杂度" class="headerlink" title="时间与空间复杂度"></a>时间与空间复杂度</h2><blockquote>
<p>插入排序是稳定的排序算法，其时间复杂度计算公式如下。可以看到插入排序最好的情况时间复杂度为n，最坏的情况下时间复杂度均为2^n，空间复杂度为O(1)，平均时间复杂度为2^n。</p>
</blockquote>
<p>$$<br>k1 + k2 + k3 + k4 + … kn &#x3D; \sum_{k&#x3D;1}^{n}{k_n} (1 &lt;&#x3D; k1,k2,…,kn &lt;&#x3D; n-1)<br>$$</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertion</span><span class="hljs-params">(Comparable[] c)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> N = c.length;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &gt; <span class="hljs-number">0</span> &amp;&amp; less(c[j], c[j-<span class="hljs-number">1</span>]); j--)&#123;<br>            exch(c, j, j-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构与算法</tag>
        <tag>稳定排序</tag>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2020/10/26/QuickSort/</url>
    <content><![CDATA[<p>快速排序（英语：Quicksort），又称分区交换排序（partition-exchange sort），简称快排，一种排序算法，最早由东尼·霍尔提出。通常明显比其&gt;他算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地达成。</p>
<a id="more"></a>


<h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><blockquote>
<p>是一种分治的思想。它将一个数组分成两个子数组，两部分独立的排序。</p>
</blockquote>
<p>原数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[5] [8] [9] [7] [1] [3] [9]<br></code></pre></td></tr></table></figure>

<p>假定第一个元素<font color="red">[5]</font>为哨兵，标记哨兵为x，使用临时变量<code>temp</code>存放哨兵的值，则原数据如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[x] [8] [9] [7] [1] [3] [9]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">temp = [5]<br>left = 1<br>right = 6<br></code></pre></td></tr></table></figure>

<p>第一步：，从数组尾部开始扫描，如果当前元素<code>c[right]</code>大于哨兵的值，则索引<code>right</code>减1，继续扫描，如果当前元素<code>c[right]</code>小于哨兵的值，则交换哨兵与当前元素的值。因为<font color="red">[3]</font>小于<font color="red">[9]</font>，因此交换<font color="red">[3]</font>和哨兵<font color="red">[x]</font>，得到如下结果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[3] [8] [9] [7] [1] [x] [9]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">temp = [5]<br>left = 1<br>right = 5<br></code></pre></td></tr></table></figure>

<p>第二步，从数组头部开始扫描，如果当前元素<code>c[left]</code>小于哨兵的值，则索引<code>left</code>加1，继续扫描，如果当前元素<code>c[left]</code>大于哨兵的值，则交换哨兵与当前元素的值。因为<font color="red">[8]</font>大于<font color="red">[5]</font>，因此交换<font color="red">[8]</font>和哨兵<font color="red">[x]</font>，得到如下结果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[3] [x] [9] [7] [1] [8] [9]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">temp = [9]<br>left = 1<br>right = 5<br></code></pre></td></tr></table></figure>

<p>第三步，继续从<code>right-1</code>处继续扫描，重复步骤一，得到结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[3] [1] [9] [7] [x] [8] [9]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">temp = [9]<br>left = 1<br>right = 4<br></code></pre></td></tr></table></figure>

<p>第四步，继续从<code>left+1</code>处继续扫描，重复步骤二，得到结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[3] [1] [x] [7] [9] [8] [9]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">temp = [9]<br>left = 2<br>right = 4<br></code></pre></td></tr></table></figure>

<p>一直重复上面的步骤直到，<code>left</code>大于等于<code>right</code>结束扫描，最后把临时变量temp的值存入<font color="red">[x]</font>处，第一轮快速排序结束。可以得到第一轮结果如下，可以很明显看到小于<font color="red">[5]</font>的值全在左边，大于<font color="red">[5]</font>的值全在右边。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[3] [1] [5] [7] [9] [8] [9]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">temp = [9]<br>left = 2<br>right = 2<br></code></pre></td></tr></table></figure>


<p>第二轮，把第一轮的结果看成如下两个数组，对每个数组，重复第一轮的排序方法，直到左右数组均有序。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[3] [1]<br></code></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[7] [9] [8] [9]<br></code></pre></td></tr></table></figure>

<p>最终可以得到有序数组。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [5] [7] [8] [9] [9]<br></code></pre></td></tr></table></figure>



<h2 id="时间与空间复杂度"><a href="#时间与空间复杂度" class="headerlink" title="时间与空间复杂度"></a>时间与空间复杂度</h2><blockquote>
<p>快速排序是不稳定的排序算法，其时间复杂度计算公式如下，可以看到快速排序最好情况下时间复杂度为<code>O(nlogn)</code>，最坏情况下时间复杂度为<code>2^n</code>，平均时间复杂度为<code>O(nlogn)</code>。</p>
</blockquote>
<p>$$<br>待补充<br>$$</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote>
<p>less函数与exch函数参见文章排序算法序言。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quick</span><span class="hljs-params">(Comparable[] c)</span></span>&#123;<br>    sort(c, <span class="hljs-number">0</span>, c.length-<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] c, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (end &lt;= start) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> j = partition(c, start, end);<br>    sort(c, start, j - <span class="hljs-number">1</span>);<br>    sort(c, j+<span class="hljs-number">1</span>, end);<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(Comparable[] c, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = start, j = end + <span class="hljs-number">1</span>;<br>    Comparable v = c[start];<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>        <span class="hljs-keyword">while</span> (less(c[++i], v))&#123;<br>            <span class="hljs-keyword">if</span>(i == end)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (less(v, c[--j]))&#123;<br>            <span class="hljs-keyword">if</span>(j == start)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i &gt;= j)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        exch(c, i, j);<br>    &#125;<br>    exch(c, start, j);<br>    <span class="hljs-keyword">return</span> j;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构与算法</tag>
        <tag>不稳定排序</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/2020/10/26/SelectionSort/</url>
    <content><![CDATA[<p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<a id="more"></a>


<h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><blockquote>
<p>每次在未排序的数组中，找到最大或者最小的元素，放到已排序数组的末尾，依次进行，直到数组全部有序。</p>
</blockquote>
<p>原数据：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[9] [8] [9] [7] [1] [3] [5]<br></code></pre></td></tr></table></figure>

<p>第一步，在原始数组中找到最小元素<font color="red">[1]</font>，起始位置的<font color="red">[9]</font>进行交换，结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [8] [9] [7] [9] [3] [5]<br></code></pre></td></tr></table></figure>

<p>第二步，在剩余未排序数组中找到最小元素<font color="red">[3]</font>与<font color="red">[8]</font>进行交换，结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [9] [7] [9] [8] [5]<br></code></pre></td></tr></table></figure>

<p>第三步，在剩余未排序数组中找到最小元素<font color="red">[5]</font>与索引三处的<font color="red">[9]</font>进行交换，结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [5] [7] [9] [8] [9]<br></code></pre></td></tr></table></figure>

<p>第四步，在剩余未排序数组中找到最小元素<font color="red">[7]</font>，其已经处在正确位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [5] [7] [9] [8] [9]<br></code></pre></td></tr></table></figure>

<p>第五步，在剩余未排序数组中找到最小元素<font color="red">[8]</font>，前面的<font color="red">[9]</font>进行交换，结果如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [5] [7] [8] [9] [9]<br></code></pre></td></tr></table></figure>

<p>第六步，在剩余未排序数组中找到最小元素<font color="red">[9]</font>，其已经处在正确位置。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">[1] [3] [5] [7] [8] [9] [9]<br></code></pre></td></tr></table></figure>

<p>排序完毕，数组已经有序。</p>
<h2 id="时间与空间复杂度"><a href="#时间与空间复杂度" class="headerlink" title="时间与空间复杂度"></a>时间与空间复杂度</h2><blockquote>
<p>从第一步就可以明显看出，两个<code>[9]</code>交换了次序，因此插入排序是不稳定的排序算法。其时间复杂度计算公式如下。可以看到选择排序最好的情况下时间复杂度为2^n，最坏的情况下时间复杂度为2^n，空间复杂度为O(1)，平均时间复杂度为2^n。</p>
</blockquote>
<p>$$<br>(n-1) + (n-2) + … + 1 &#x3D; \frac{n * (n-1)}{2}<br>$$</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote>
<p>less函数与exch函数参见文章排序算法序言。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertion</span><span class="hljs-params">(Comparable[] c)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> N = c.length;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &gt; <span class="hljs-number">0</span> &amp;&amp; less(c[j], c[j-<span class="hljs-number">1</span>]); j--)&#123;<br>            exch(c, j, j-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构与算法</tag>
        <tag>不稳定排序</tag>
        <tag>选择排序</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法引言</title>
    <url>/2020/10/25/SortIntroduction/</url>
    <content><![CDATA[<p>排序算法是最常见的算法之一，常见的排序算法有<code>冒泡排序</code>、<code>插入排序</code>、<code>选择排序</code>、<code>希尔排序</code>、<code>归并排序</code>、<code>堆排序</code>、<code>快速排序</code>。其目的是为了实现&gt;对数组中元素的排序。通常排序分为正序和倒序。</p>
<a id="more"></a>


<h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><blockquote>
<ul>
<li>最好、最坏、平均时间复杂度</li>
<li><code>时间复杂度</code>计算公式</li>
<li>比较次数和交换次数</li>
</ul>
</blockquote>
<h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><blockquote>
<ul>
<li><code>空间复杂度</code>，衡量空间上的内存消耗</li>
<li><code>原地排序</code>，代指空间复杂度为O(1)的排序</li>
</ul>
</blockquote>
<h2 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h2><blockquote>
<ul>
<li><code>稳定</code>的算法在排序的过程中不会改变元素彼此的位置的相对次序,反之<code>不稳定</code>的排序算法经常会改变这个次序。以某两个相等元素<code>c[i]</code>和<code>c[j]</code>为例，假如在原始待排序数组中<code>c[i] == c[j]</code>，并且<code>c[i]</code>位置在<code>c[j]</code>之前。那么如果整个排序过程中，<code>c[i]</code>均在<code>c[j]</code>之前，则说明排序算法是稳定的，反之则是不稳定的。</li>
</ul>
</blockquote>
<figure class="highlight prolog"><table><tr><td class="code"><pre><code class="hljs prolog">[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>][<span class="hljs-number">9</span>] .... [i] ... [j] ...<br></code></pre></td></tr></table></figure>



<h2 id="公共函数"><a href="#公共函数" class="headerlink" title="公共函数"></a>公共函数</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*比较两个元素大小*/</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">less</span><span class="hljs-params">(Comparable v, Comparable w)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> v.compareTo(w) &lt; <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/*交换两个元素*/</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">exch</span><span class="hljs-params">(Comparable[] a, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span>&#123;<br>    Comparable t = a[i];<br>    a[i] = a[j];<br>    a[j] = t;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>排序算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构与算法</tag>
        <tag>排序算法</tag>
        <tag>稳定与不稳定</tag>
        <tag>时间复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo样式个性化配置</title>
    <url>/2021/03/31/hexo-preference/</url>
    <content><![CDATA[<p>hexo博客搭建好之后，如何调整样式对于没有前端基础的人来说是一件很困难的事情，下面分享我样式调整过程中的一些经验，由于我使用的是Next主题，所以如果是其它的主题的仅做参考，有可能细节之处不太一样。</p>
<a id="more"></a>



<h2 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明"></a>变量说明</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># blog home dir</span><br>BLOG_HOME=/Users/lei/workspace/MyBlog<br></code></pre></td></tr></table></figure>



<h2 id="解锁样式定制配置"><a href="#解锁样式定制配置" class="headerlink" title="解锁样式定制配置"></a>解锁样式定制配置</h2><p>（1）打开next主题配置文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">vim <span class="hljs-variable">$&#123;BLOG_HOME&#125;</span>/themes/next/_config.yml<br></code></pre></td></tr></table></figure>



<p>（2）搜索<code>custom_file_path</code>可以看到如下配置，把反注释掉<code>style: source/_data/styles.styl</code>配置，记住去掉<code>#</code>号即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_file_path:</span><br>  <span class="hljs-comment">#head: source/_data/head.swig</span><br>  <span class="hljs-comment">#header: source/_data/header.swig</span><br>  <span class="hljs-comment">#sidebar: source/_data/sidebar.swig</span><br>  <span class="hljs-comment">#postMeta: source/_data/post-meta.swig</span><br>  <span class="hljs-comment">#postBodyEnd: source/_data/post-body-end.swig</span><br>  <span class="hljs-comment">#footer: source/_data/footer.swig</span><br>  <span class="hljs-comment">#bodyEnd: source/_data/body-end.swig</span><br>  <span class="hljs-comment">#variable: source/_data/variables.styl</span><br>  <span class="hljs-comment">#mixin: source/_data/mixins.styl</span><br>  <span class="hljs-attr">style:</span> <span class="hljs-string">source/_data/styles.styl</span><br></code></pre></td></tr></table></figure>



<p>（3）注意上面的<code>source/_data</code>目录指的是博客<code>home</code>目录下的<code>source/_data</code>目录，首先创建<code>_data</code>目录，然后创建<code>styles.style</code>文件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># create _data directory</span><br>mkdir -p <span class="hljs-variable">$&#123;BLOG_HOME&#125;</span>/<span class="hljs-built_in">source</span>/_data<br><br><span class="hljs-comment"># create _data file</span><br>touch <span class="hljs-variable">$&#123;BLOG_HOME&#125;</span>/<span class="hljs-built_in">source</span>/_data/styles.styl<br></code></pre></td></tr></table></figure>



<h2 id="自定义样式配置"><a href="#自定义样式配置" class="headerlink" title="自定义样式配置"></a>自定义样式配置</h2><p>下面直接晒出我的配置，自己可以打开<code>Chrome</code>浏览器的检查功能，慢慢对照样式进行调整，其实主要是为了<code>PC</code>端与移动端的适配，保证<code>PC</code>端简洁大方，移动端不至于空白太多。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//背景图片配置</span><br><span class="hljs-selector-tag">body</span> &#123;<br>    background:url(/images/background.jpeg);<br>    <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>    <span class="hljs-attribute">background-attachment</span>:fixed;<br>    <span class="hljs-attribute">background-position</span>:<span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>&#125;<br><br><span class="hljs-comment">//文章部分配置</span><br><span class="hljs-selector-class">.main-inner</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">3%</span> <span class="hljs-number">1px</span> <span class="hljs-number">3%</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">80%</span>;<br>    +mobile() &#123;<br>   	<span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span> <span class="hljs-number">1px</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//移动端自适应</span><br><span class="hljs-selector-class">.content-wrap</span> &#123;<br>   +mobile() &#123;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span> <span class="hljs-number">1%</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//移动端自适应</span><br><span class="hljs-selector-class">.use-motion</span> .post-block&#123;<br>   +mobile() &#123;<br>      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>      <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//移动端自适应</span><br><span class="hljs-selector-class">.comments</span> &#123;<br>   +mobile() &#123;<br>      <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0px</span>;<br>      <span class="hljs-attribute">overflow</span>: hidden;   <br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//移动端自适应</span><br><span class="hljs-selector-class">.gt-container</span> <span class="hljs-selector-class">.gt-meta</span> &#123;<br>   +mobile() &#123;<br>      <span class="hljs-attribute">margin</span>: <span class="hljs-number">1.25em</span> <span class="hljs-number">0</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//内容最上面留白配置</span><br>.<span class="hljs-attribute">content</span>&#123;<br>   <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">0px</span>;<br>&#125;<br><br><span class="hljs-comment">//超链接配置</span><br><span class="hljs-selector-class">.post-body</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">a</span> &#123;<br>   <span class="hljs-attribute">color</span>: <span class="hljs-number">#0645AD</span>;<br>   <span class="hljs-attribute">border-bottom</span>: none;<br>   <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#0645AD</span>;<br>   <span class="hljs-selector-pseudo">&amp;:hover</span> &#123;<br>      <span class="hljs-attribute">color</span>: <span class="hljs-number">#0B0080</span>;<br>      <span class="hljs-attribute">border-bottom</span>: none;<br>      <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#0B0080</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//graphviz图片自适应</span><br><span class="hljs-selector-class">.post-body</span> svg &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-comment">//多级目录自动展开</span><br><span class="hljs-selector-class">.post-toc</span> <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-class">.nav-child</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo简单使用</title>
    <url>/2021/03/18/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p><font color=green><strong>Hexo</strong></font> 是一个简单，美观，使用起来方便，支持各种二次定制的博客框架。并且支持丰富的<font color=green><strong>Markdown</strong></font>插件，是程序员不可多得的博客框架。</p>
<a id="more"></a>


<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>基本<font color=green><strong>Hexo</strong></font>使用命令介绍。</p>
<h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> hexo new <span class="hljs-string">&#x27;title&#x27;</span></span><br></code></pre></td></tr></table></figure>
<p>创建完博客之后，会自动在<font color=blue> <strong>source&#x2F;_posts</strong>&#x2F;</font>目录下面创建一个同名的md结尾的<font color=green><strong>Markdown</strong></font>文件，此时只需要使用markdown编辑器打开md文件撰写博客即可，例如Typora或者Atomic等等。</p>
<h3 id="本地预览博客"><a href="#本地预览博客" class="headerlink" title="本地预览博客"></a>本地预览博客</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> hexo s</span><br></code></pre></td></tr></table></figure>

<p>撰写完博客之后，在正式发布到博客网站之后，可以先使用<font color=green><strong>server</strong></font>命令本地启动博客服务器，预览博客效果，在确认没有问题之后再发布到正式网站上面。</p>
<h3 id="正式发布博客"><a href="#正式发布博客" class="headerlink" title="正式发布博客"></a>正式发布博客</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> hexo clean &amp;&amp; hexo g -d</span><br></code></pre></td></tr></table></figure>

<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><a href="https://theme-next.iissnan.com/theme-settings.html" title="Next Theme主题配置">Next Theme</a>     - next theme主题官方配置教程</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka命令</title>
    <url>/2021/03/27/kafka%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>kafka是一款优秀且常见的MQ，具有安装方便，使用方便，应用场景广泛等一系列优点，个人认为是最好用的MQ之一。</p>
<a id="more"></a>

<h2 id="基本变量"><a href="#基本变量" class="headerlink" title="基本变量"></a>基本变量</h2><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># kafka version</span><br>version=kafka_2.12-1.1.0<br><br><span class="hljs-comment"># kafka topic</span><br>topic=ChristmasEvent<br><br><span class="hljs-comment"># kafka bootstrap server</span><br>Kafka_server=19.94.08.13:19092<br><br><span class="hljs-comment"># kafka zookeeper server</span><br>zk_server=19.14.08.13:21810<br><br><span class="hljs-comment"># kafka consumer group</span><br>consumer_group=bless-server<br></code></pre></td></tr></table></figure>



<h2 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建Topic</h2><p>创建kafka topic，其中replication-factor代表副本数，partitions代表分区数。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-topics.sh --create --zookeeper <span class="hljs-variable">$&#123;zk_server&#125;</span> --replication-factor 1 --partitions 1 --topic <span class="hljs-variable">$&#123;topic&#125;</span><br></code></pre></td></tr></table></figure>



<h2 id="查看Topic内容（当前开始）"><a href="#查看Topic内容（当前开始）" class="headerlink" title="查看Topic内容（当前开始）"></a>查看Topic内容（当前开始）</h2><p>从当前时刻开始，用于实时查看kafka的消息。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-console-consumer.sh --bootstrap-server <span class="hljs-variable">$&#123;kafka_server&#125;</span> --topic <span class="hljs-variable">$&#123;topic&#125;</span><br></code></pre></td></tr></table></figure>



<h2 id="查看Topic内容（从头开始）"><a href="#查看Topic内容（从头开始）" class="headerlink" title="查看Topic内容（从头开始）"></a>查看Topic内容（从头开始）</h2><p>从头开始，用于实时查看kafka消息，仅限开发调测环境使用，当kafka消息过多时可能会导致异常问题。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-console-consumer.sh --bootstrap-server <span class="hljs-variable">$&#123;kafka_server&#125;</span> --topic <span class="hljs-variable">$&#123;topic&#125;</span> --from-beginning<br></code></pre></td></tr></table></figure>



<h2 id="查看消费组（旧版本）"><a href="#查看消费组（旧版本）" class="headerlink" title="查看消费组（旧版本）"></a>查看消费组（旧版本）</h2><p>查看消费者组情况，适用于用于旧版本kafka客户端。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-consumer-groups.sh --list --bootstrap-server <span class="hljs-variable">$&#123;kafka_server&#125;</span><br></code></pre></td></tr></table></figure>



<h2 id="查看消费组（新版本）"><a href="#查看消费组（新版本）" class="headerlink" title="查看消费组（新版本）"></a>查看消费组（新版本）</h2><p>查看消费者组情况，适用于用于新版本kafka客户端。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-consumer-groups.sh --new-consumer --bootstrap-server <span class="hljs-variable">$&#123;kafka_server&#125;</span> --list<br></code></pre></td></tr></table></figure>



<h2 id="查看消费组（使用ZK连接而非Java-Api）"><a href="#查看消费组（使用ZK连接而非Java-Api）" class="headerlink" title="查看消费组（使用ZK连接而非Java Api）"></a>查看消费组（使用ZK连接而非Java Api）</h2><p>查看消费者组情况，仅限于使用zk连接的消费者。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-consumer-groups.sh --zookeeper <span class="hljs-variable">$&#123;zk_server&#125;</span> --list<br></code></pre></td></tr></table></figure>



<h2 id="查看单个消费组详情（Java-Api）"><a href="#查看单个消费组详情（Java-Api）" class="headerlink" title="查看单个消费组详情（Java Api）"></a>查看单个消费组详情（Java Api）</h2><p>查看单个消费者组情况，使用Java Api连接的消费者。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-consumer-groups.sh --new-consumer --bootstrap-server <span class="hljs-variable">$&#123;kafka_server&#125;</span> --group <span class="hljs-variable">$&#123;consumer_group&#125;</span> --describe<br></code></pre></td></tr></table></figure>



<h2 id="查看单个消费组详情（ZK）"><a href="#查看单个消费组详情（ZK）" class="headerlink" title="查看单个消费组详情（ZK）"></a>查看单个消费组详情（ZK）</h2><p>查看单个消费者组情况，使用zk连接的消费者。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-consumer-groups.sh --zookeeper <span class="hljs-variable">$&#123;zk_server&#125;</span> --group <span class="hljs-variable">$&#123;consumer_group&#125;</span> --describe<br></code></pre></td></tr></table></figure>



<h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><p>直接在命令行发布一条消息，可以用于开发环境调测，重放消息等。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-console-producer.sh --broker-list <span class="hljs-variable">$&#123;kafka_server&#125;</span> --topic <span class="hljs-variable">$&#123;topic&#125;</span><br></code></pre></td></tr></table></figure>



<h2 id="查看Topic列表"><a href="#查看Topic列表" class="headerlink" title="查看Topic列表"></a>查看Topic列表</h2><p>查看kafka当前Topic列表。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-topics.sh --zookeeper <span class="hljs-variable">$&#123;zk_server&#125;</span> --list<br></code></pre></td></tr></table></figure>



<h2 id="查看单个Topic详情"><a href="#查看单个Topic详情" class="headerlink" title="查看单个Topic详情"></a>查看单个Topic详情</h2><p>查看单个Topic详情。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">~/bin/kafka-topics.sh --zookeeper <span class="hljs-variable">$&#123;zk_server&#125;</span> --topic <span class="hljs-variable">$&#123;topic&#125;</span> --describe<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kafka</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>MQ</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-1011 在 D 天内送达包裹的能力</title>
    <url>/2021/08/28/leetcode-1011/</url>
    <content><![CDATA[<p>题目描述：传送带上的包裹必须在 D 天内从一个港口运送到另一个港口。</p>
<p>传送带上的第 i 个包裹的重量为 weights[i]。每一天，我们都会按给出重量的顺序往传送带上装载包裹。我们装载的重量不会超过船的最大运载重量。</p>
<p>返回能在 D 天内将传送带上的所有包裹送达的船的最低运载能力。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">shipWithinDays</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] weights, <span class="hljs-keyword">int</span> days)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> minWeight = Integer.MIN_VALUE;<br>        <span class="hljs-keyword">int</span> maxWeight = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> len = weights.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            maxWeight += weights[i];<br>            <span class="hljs-keyword">if</span> (weights[i] &gt; minWeight) &#123;<br>                minWeight = weights[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> left = minWeight;<br>        <span class="hljs-keyword">int</span> right = maxWeight;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> currentDays = calculateDays(weights, mid);<br>            <span class="hljs-keyword">if</span> (currentDays == days) &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentDays &lt; days) &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentDays &gt; days) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculateDays</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] weights, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> days = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> tmpWeight = weight;<br>        <span class="hljs-keyword">while</span> (i &lt; weights.length) &#123;<br>            <span class="hljs-keyword">if</span> (tmpWeight &gt;= weights[i]) &#123;<br>                tmpWeight -= weights[i];<br>                i++;<br>                <span class="hljs-keyword">if</span> (i == weights.length) &#123;<br>                    days++;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tmpWeight = weight;<br>                days++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> days;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>二分查找</tag>
        <tag>难度中等</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-105 从前序与中序遍历序列构造二叉树</title>
    <url>/2021/08/02/leetcode-105/</url>
    <content><![CDATA[<p>题目描述：给定一棵树的前序遍历 <code>preorder</code> 与中序遍历 <code>inorder</code>。请构造二叉树并返回其根节点。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> buildTree(preorder, <span class="hljs-number">0</span>, inorder, <span class="hljs-number">0</span>, inorder.length);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span> rootIdx, <span class="hljs-keyword">int</span>[] inorder, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (start &gt;= end) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 单个节点直接返回</span><br>        <span class="hljs-keyword">if</span> (start == end - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode(inorder[start]);<br>        &#125;<br><br>        <span class="hljs-comment">//3. 前序第一个节点为二叉树根节点</span><br>        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(preorder[rootIdx]);<br><br>        <span class="hljs-comment">//4. 寻找根节点在中序序列中的索引值</span><br>        <span class="hljs-keyword">int</span> rootIdxInOrder = start;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> idx = start; idx &lt; end; idx++) &#123;<br>            <span class="hljs-keyword">if</span> (inorder[idx] == root.val) &#123;<br>                rootIdxInOrder = idx;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//5. 中序序列中根节点左部分节点构成左子树</span><br>        TreeNode leftNode = buildTree(preorder, rootIdx + <span class="hljs-number">1</span>, inorder, start, rootIdxInOrder);<br><br>        <span class="hljs-comment">//6. 中序序列中根节点右部分节点构成右子树</span><br>        TreeNode rightNode = buildTree(preorder, rootIdx + <span class="hljs-number">1</span> + rootIdxInOrder - start, inorder, rootIdxInOrder + <span class="hljs-number">1</span>, end);<br><br>        <span class="hljs-comment">//7. 连接左右子树</span><br>        root.left = leftNode;<br>        root.right = rightNode;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树</tag>
        <tag>前序、中序</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-106 从中序与后续遍历序列构造二叉树</title>
    <url>/2021/08/03/leetcode-106/</url>
    <content><![CDATA[<p>题目描述：根据一棵树的中序遍历与后序遍历构造二叉树。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] inorder, <span class="hljs-keyword">int</span>[] postorder)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> buildTree(inorder, <span class="hljs-number">0</span>, inorder.length, postorder, postorder.length - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] inorder, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end, <span class="hljs-keyword">int</span>[] postorder, <span class="hljs-keyword">int</span> rootIdx)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (start &gt;= end) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 单个节点直接返回</span><br>        <span class="hljs-keyword">if</span> (start == end - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode(inorder[start]);<br>        &#125;<br><br>        <span class="hljs-comment">//3. 后续最后一个节点为二叉树根节点</span><br>        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(postorder[rootIdx]);<br><br>        <span class="hljs-comment">//4. 寻找根节点在中序序列中的索引值</span><br>        <span class="hljs-keyword">int</span> rootIdxInOrder = start;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> idx = start; idx &lt; end; idx++) &#123;<br>            <span class="hljs-keyword">if</span> (inorder[idx] == root.val) &#123;<br>                rootIdxInOrder = idx;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//5. 中序序列中根节点左部分节点构成左子树</span><br>        TreeNode leftNode = buildTree(inorder, start, rootIdxInOrder, postorder, rootIdx - (end - rootIdxInOrder));<br><br>        <span class="hljs-comment">//6. 中序序列中根节点右部分节点构成右子树</span><br>        TreeNode rightNode = buildTree(inorder, rootIdxInOrder + <span class="hljs-number">1</span>, end, postorder, rootIdx - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//7. 连接左右子树</span><br>        root.left = leftNode;<br>        root.right = rightNode;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树</tag>
        <tag>中序、后序</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-114 二叉树展开为链表</title>
    <url>/2021/07/30/leetcode-114/</url>
    <content><![CDATA[<p>题目描述：给你二叉树的根结点 root ，请你将它展开为一个单链表：</p>
<ul>
<li>展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。</li>
<li>展开后的单链表应该与二叉树 先序遍历 顺序相同。</li>
</ul>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flatten</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        convertTree2List(root);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">convertTree2List</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span> || (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span>))&#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 转换左子树</span><br>        TreeNode leftHeadNode = convertTree2List(root.left);<br><br>        <span class="hljs-comment">//3. 转换右子树</span><br>        TreeNode rightHeadNode = convertTree2List(root.right);<br><br>        <span class="hljs-comment">//4. 找到左子树的叶子节点</span><br>        TreeNode leftTailNode = leftHeadNode;<br>        <span class="hljs-keyword">while</span> (leftTailNode != <span class="hljs-keyword">null</span> &amp;&amp; leftTailNode.right != <span class="hljs-keyword">null</span>)&#123;<br>            leftTailNode = leftTailNode.right;<br>        &#125;<br><br>        <span class="hljs-comment">//5. 拼接左右子树与根节点</span><br>        <span class="hljs-keyword">if</span> (leftTailNode == <span class="hljs-keyword">null</span>)&#123;<br>            root.right = rightHeadNode;<br>            root.left = <span class="hljs-keyword">null</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            root.right = leftHeadNode;<br>            leftTailNode.right = rightHeadNode;<br>            root.left = <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树</tag>
        <tag>单链表</tag>
        <tag>反转</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-1143 最长公共子序列</title>
    <url>/2021/09/18/leetcode-1143/</url>
    <content><![CDATA[<p>题目描述：给定两个字符串 text1 和 text2，返回这两个字符串的最长 公共子序列 的长度。如果不存在 公共子序列 ，返回 0 。</p>
<p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p>
<p>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。<br>两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(String text1, String text2)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[text1.length() + <span class="hljs-number">1</span>][text2.length() + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= text1.length(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= text2.length(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (text1.charAt(i - <span class="hljs-number">1</span>) == text2.charAt(j - <span class="hljs-number">1</span>)) &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dp[i][j] = Math.max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[text1.length()][text2.length()];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-116 填充每个节点的下一个右侧节点指针</title>
    <url>/2021/07/31/leetcode-116/</url>
    <content><![CDATA[<p>题目描述：给定一个 完美二叉树 ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>		<span class="hljs-keyword">int</span> val;<br>  	Node left;<br>  	Node right;<br>  	Node next;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。初始状态下，所有 next 指针都被设置为 NULL。你只能使用常量级额外空间。使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">connect</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span> || (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span>)) &#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 处理左子树</span><br>        Node leftNode = connect(root.left);<br><br>        <span class="hljs-comment">//3. 处理右子树</span><br>        Node rightNode = connect(root.right);<br><br>        <span class="hljs-comment">//4. 处理根节点</span><br>        <span class="hljs-keyword">while</span> (leftNode != <span class="hljs-keyword">null</span>)&#123;<br>            leftNode.next = rightNode;<br>            leftNode = leftNode.right;<br>            rightNode = rightNode.left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-130 被围绕的区域</title>
    <url>/2021/08/19/leetcode-130/</url>
    <content><![CDATA[<p>题目描述：给你一个 <code>m x n</code> 的矩阵 <code>board</code> ，由若干字符 <code>&#39;X&#39;</code> 和 <code>&#39;O&#39;</code> ，找到所有被 <code>&#39;X&#39;</code> 围绕的区域，并将这些区域里所有的 <code>&#39;O&#39;</code> 用 <code>&#39;X&#39;</code> 填充。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="连通图实现"><a href="#连通图实现" class="headerlink" title="连通图实现"></a>连通图实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UF</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 子树个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 记录每个节点的父节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] parent;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 记录每个节点的子树的节点个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] size;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化构造函数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n 子树初始节点个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.count = n;<br>        <span class="hljs-keyword">this</span>.parent = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">this</span>.size = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            parent[i] = i;<br>            size[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 合并两颗子树</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p 节点p</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> q 节点q</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pRoot = findRoot(p);<br>        <span class="hljs-keyword">int</span> qRoot = findRoot(q);<br>        <span class="hljs-keyword">if</span> (pRoot == qRoot) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (size[pRoot] &gt; size[qRoot]) &#123;<br>            parent[qRoot] = pRoot;<br>            size[pRoot] = size[qRoot] + size[pRoot];<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent[pRoot] = qRoot;<br>            size[qRoot] = size[pRoot] + size[qRoot];<br>        &#125;<br>        count--;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 两个节点是否属于同一颗子树</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> p 节点p</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> q 节点q</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否属于同一颗子树</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">connected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> q)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pRoot = findRoot(p);<br>        <span class="hljs-keyword">int</span> qRoot = findRoot(q);<br>        <span class="hljs-keyword">return</span> pRoot == qRoot;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 找到当前节点的根节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> x 当前节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 根节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findRoot</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (parent[x] != x) &#123;<br>            parent[x] = parent[parent[x]];<br>            x = parent[x];<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回当前子树个数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (board == <span class="hljs-keyword">null</span> || board.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 初始化连通图</span><br>        <span class="hljs-keyword">int</span> m = board.length;<br>        <span class="hljs-keyword">int</span> n = board[<span class="hljs-number">0</span>].length;<br>        UF uf = <span class="hljs-keyword">new</span> UF(m * n + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//3. 假设有个m*n节点，视为非包围O节点的根节点</span><br>        <span class="hljs-keyword">int</span> dummy = m * n;<br><br>        <span class="hljs-comment">//4. 处理前后两列</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">if</span> (board[i][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>                uf.union(i * n, dummy);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (board[i][n - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>                uf.union(i * n + n - <span class="hljs-number">1</span>, dummy);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//5. 处理上下两行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (board[<span class="hljs-number">0</span>][j] == <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>                uf.union(j, dummy);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (board[m - <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>                uf.union((m - <span class="hljs-number">1</span>) * n + j, dummy);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//6. 处理每个非边缘节点</span><br>        <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;, &#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; n - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (board[i][j] == <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>                    <span class="hljs-keyword">int</span> p = i * n + j;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) &#123;<br>                        <span class="hljs-keyword">int</span> x = i + dp[k][<span class="hljs-number">0</span>];<br>                        <span class="hljs-keyword">int</span> y = j + dp[k][<span class="hljs-number">1</span>];<br>                        <span class="hljs-keyword">if</span> (board[x][y] == <span class="hljs-string">&#x27;O&#x27;</span>) &#123;<br>                            <span class="hljs-keyword">int</span> q = x * n + y;<br>                            uf.union(p, q);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//7. 根据结果处理数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; n - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (!uf.connected(dummy, i * n + j)) &#123;<br>                    board[i][j] = <span class="hljs-string">&#x27;X&#x27;</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>矩阵</tag>
        <tag>二维数组</tag>
        <tag>图</tag>
        <tag>连通性</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-1373 二叉搜索子树的最大键值和</title>
    <url>/2021/08/09/leetcode-1373/</url>
    <content><![CDATA[<p>题目描述：给你一棵以 root 为根的 二叉树 ，请你返回 任意 二叉搜索子树的最大键值和。</p>
<p>二叉搜索树的定义如下：</p>
<ul>
<li>任意节点的左子树中的键值都 小于 此节点的键值。</li>
<li>任意节点的右子树中的键值都 大于 此节点的键值。</li>
<li>任意节点的左子树和右子树都是二叉搜索树。</li>
<li>每棵树有 <code>1</code> 到 <code>40000</code> 个节点。</li>
<li>每个节点的键值在 <code>[-4 * 10^4 , 4 * 10^4]</code> 之间。</li>
</ul>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxSumBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        postBST(root);<br>        <span class="hljs-keyword">return</span> maxSum;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * int[] 是否是二叉搜索树，左子树最小值，右子树最大值，如果是二叉搜索树则求和</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] postBST(TreeNode root) &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, Integer.MAX_VALUE, Integer.MIN_VALUE, <span class="hljs-number">0</span>&#125;;<br>        &#125;<br>        <span class="hljs-keyword">int</span>[] left = postBST(root.left);<br>        <span class="hljs-keyword">int</span>[] right = postBST(root.right);<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>, Integer.MAX_VALUE, Integer.MIN_VALUE, <span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">if</span> (left[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> &amp;&amp; right[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> &amp;&amp; root.val &gt; left[<span class="hljs-number">2</span>] &amp;&amp; root.val &lt; right[<span class="hljs-number">1</span>]) &#123;<br>            res[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            res[<span class="hljs-number">1</span>] = Math.min(root.val, left[<span class="hljs-number">1</span>]);<br>            res[<span class="hljs-number">2</span>] = Math.max(root.val, right[<span class="hljs-number">2</span>]);<br>            res[<span class="hljs-number">3</span>] = left[<span class="hljs-number">3</span>] + right[<span class="hljs-number">3</span>] + root.val;<br>            maxSum = Math.max(res[<span class="hljs-number">3</span>], maxSum);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>二叉搜索树</tag>
        <tag>难度困难</tag>
        <tag>子树</tag>
        <tag>最大键值和</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-141 环形链表</title>
    <url>/2021/08/30/leetcode-141/</url>
    <content><![CDATA[<p>题目描述：给定一个链表，判断链表中是否有环。</p>
<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p>
<p>如果链表中存在环，则返回 true 。 否则，返回 false 。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span> || head.next.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        ListNode quickPoint = head.next.next;<br>        ListNode slowPoint = head.next;<br><br>        <span class="hljs-keyword">while</span> (quickPoint.next != <span class="hljs-keyword">null</span> &amp;&amp; quickPoint.next.next != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (quickPoint == slowPoint) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            quickPoint = quickPoint.next.next;<br>            slowPoint = slowPoint.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>环形链表</tag>
        <tag>难度简单</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-142 环形链表</title>
    <url>/2021/08/21/leetcode-142/</url>
    <content><![CDATA[<p>题目描述：给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p>
<p>为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。注意，pos 仅仅是用于标识环的情况，并不会作为参数传递到函数中。</p>
<p>说明：不允许修改给定的链表。</p>
<a id="more"></a>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判断是否有环</span><br>        ListNode fastNode = head;<br>        ListNode slowNode = head;<br>        <span class="hljs-keyword">while</span> (fastNode != <span class="hljs-keyword">null</span> &amp;&amp; fastNode.next != <span class="hljs-keyword">null</span>) &#123;<br>            fastNode = fastNode.next.next;<br>            slowNode = slowNode.next;<br>            <span class="hljs-keyword">if</span> (fastNode == slowNode) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 说明没环，直接返回null</span><br>        <span class="hljs-keyword">if</span> (fastNode != slowNode || fastNode == <span class="hljs-keyword">null</span> || fastNode.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//3. 计算环大小</span><br>        <span class="hljs-keyword">int</span> cycleSize = <span class="hljs-number">1</span>;<br>        fastNode = fastNode.next.next;<br>        slowNode = slowNode.next;<br>        <span class="hljs-keyword">while</span> (fastNode != slowNode) &#123;<br>            fastNode = fastNode.next.next;<br>            slowNode = slowNode.next;<br>            cycleSize++;<br>        &#125;<br><br>        <span class="hljs-comment">//4. 快指针先走环大小步，然后和慢指针一起走，会在环开始位置相遇</span><br>        fastNode = slowNode = head;<br>        <span class="hljs-keyword">while</span> (cycleSize-- != <span class="hljs-number">0</span>) &#123;<br>            fastNode = fastNode.next;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (fastNode != slowNode) &#123;<br>            fastNode = fastNode.next;<br>            slowNode = slowNode.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fastNode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>环形链表</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-146 LRU 缓存机制</title>
    <url>/2021/08/20/leetcode-146/</url>
    <content><![CDATA[<p>题目描述：运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。<br>实现 LRUCache 类：</p>
<ul>
<li>LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存</li>
<li>int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。</li>
<li>void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li>
</ul>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRUCache</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 容量大小</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> cap;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有序HashMap</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> LinkedHashMap&lt;Integer, Integer&gt; cache = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> capacity 容量大小</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LRUCache</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cap = capacity;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.cache.containsKey(key)) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        makeRecently(key);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.cache.get(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.cache.containsKey(key)) &#123;<br>            <span class="hljs-keyword">this</span>.cache.put(key, value);<br>            makeRecently(key);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.cache.size() &gt;= <span class="hljs-keyword">this</span>.cap) &#123;<br>                <span class="hljs-keyword">this</span>.cache.remove(<span class="hljs-keyword">this</span>.cache.keySet().iterator().next());<br>            &#125;<br>            <span class="hljs-keyword">this</span>.cache.put(key, value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新key为最近</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">makeRecently</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> val = <span class="hljs-keyword">this</span>.cache.remove(key);<br>        <span class="hljs-keyword">this</span>.cache.put(key, val);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>LRU算法</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-167 两数之和 II - 输入有序数组</title>
    <url>/2021/09/03/leetcode-167/</url>
    <content><![CDATA[<p>题目描述：给定一个已按照 升序排列  的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。</p>
<p>函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 1 开始计数 ，所以答案数组应当满足 1 &lt;&#x3D; answer[0] &lt; answer[1] &lt;&#x3D; numbers.length 。</p>
<p>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numbers.length; i++) &#123;<br>            res[<span class="hljs-number">0</span>] = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> idx = find(numbers, target - numbers[i], i + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (idx == -<span class="hljs-number">1</span> || idx == i) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            res[<span class="hljs-number">1</span>] = idx + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] numbers, <span class="hljs-keyword">int</span> target, <span class="hljs-keyword">int</span> left)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> right = numbers.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (numbers[mid] == target) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (numbers[mid] &lt; target) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (numbers[mid] &gt; target) &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度简单</tag>
        <tag>有序数组</tag>
        <tag>两数之和</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-19 删除链表的倒数第 N 个结点</title>
    <url>/2021/09/02/leetcode-19/</url>
    <content><![CDATA[<p>题目描述：给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p>
<p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        ListNode fastNode = head;<br>        ListNode slowNode = head;<br>        <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>            fastNode = fastNode.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (fastNode == <span class="hljs-keyword">null</span>) &#123;<br>            slowNode = head.next;<br>            <span class="hljs-keyword">return</span> slowNode;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (fastNode.next != <span class="hljs-keyword">null</span>) &#123;<br>            fastNode = fastNode.next;<br>            slowNode = slowNode.next;<br>        &#125;<br>        slowNode.next = slowNode.next.next;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>链表</tag>
        <tag>删除</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-226 翻转二叉树</title>
    <url>/2021/07/29/leetcode-226/</url>
    <content><![CDATA[<p>题目描述：翻转一棵二叉树。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span> || (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span>))&#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        TreeNode node = invertTree(root.left);<br>        root.left = invertTree(root.right);<br>        root.right = node;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>二叉树</tag>
        <tag>反转</tag>
        <tag>难度简单</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-230 二叉搜索树中第K小的元素</title>
    <url>/2021/08/05/leetcode-230/</url>
    <content><![CDATA[<p>题目描述：给定一个二叉搜索树的根节点 <code>root</code> ，和一个整数 <code>k</code> ，请你设计一个算法查找其中第 <code>k</code> 个最小元素（从 1 开始计数）。如果二叉搜索树经常被修改（插入&#x2F;删除操作）并且你需要频繁地查找第 <code>k</code> 小的值，你将如何优化算法？</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="中序实现"><a href="#中序实现" class="headerlink" title="中序实现"></a>中序实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;TreeNode&gt; nodes = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        inorders(root);<br>        <span class="hljs-keyword">return</span> nodes.get(k).val;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inorders</span><span class="hljs-params">(TreeNode root)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inorders(root.left);<br>        nodes.add(root);<br>        inorders(root.right);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="递归优化"><a href="#递归优化" class="headerlink" title="递归优化"></a>递归优化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> idx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> idxVal = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        inorders(root, k);<br>        <span class="hljs-keyword">return</span> idxVal;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inorders</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inorders(root.left, k);<br>        idx++;<br>        <span class="hljs-keyword">if</span> (idx == k) &#123;<br>            idxVal = root.val;<br>        &#125;<br>        inorders(root.right, k);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉搜索树</tag>
        <tag>第K小元素</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-234 回文链表</title>
    <url>/2021/07/28/leetcode-234/</url>
    <content><![CDATA[<p>题目描述：请判断一个链表是否为回文链表。你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 遍历计算链表长度</span><br>        ListNode node = head;<br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-keyword">null</span>) &#123;<br>            len++;<br>            node = node.next;<br>        &#125;<br><br>        <span class="hljs-comment">//3. 寻找中间节点</span><br>        node = head;<br>        <span class="hljs-keyword">int</span> subLen = len / <span class="hljs-number">2</span> + len % <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span> (subLen-- != <span class="hljs-number">0</span>) &#123;<br>            node = node.next;<br>        &#125;<br><br>        <span class="hljs-comment">//4. 反转右半链表区间剩余节点</span><br>        ListNode subHead2 = reverse(node);<br>        ListNode subHead1 = head;<br><br>        <span class="hljs-comment">//5. 分别对比左链表区间元素与右链表区间元素</span><br>        <span class="hljs-keyword">while</span> (subHead1 != <span class="hljs-keyword">null</span> &amp;&amp; subHead2 != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (subHead1.val != subHead2.val) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            subHead1 = subHead1.next;<br>            subHead2 = subHead2.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 链表反转</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> head 链表头节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回反转后的链表头节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        ListNode newHead = reverse(head.next);<br>        head.next.next = head;<br>        head.next = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>单链表</tag>
        <tag>反转</tag>
        <tag>难度简单</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-236 二叉树的最近公共祖先</title>
    <url>/2021/08/17/leetcode-236/</url>
    <content><![CDATA[<p>题目描述：给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="遍历实现"><a href="#遍历实现" class="headerlink" title="遍历实现"></a>遍历实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 为空直接返回</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//2. 等于其中一个节点则返回</span><br>        <span class="hljs-keyword">if</span> (root == p || root == q) &#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        <span class="hljs-comment">//3. 处理左子树</span><br>        TreeNode left = lowestCommonAncestor(root.left, p, q);<br>        <span class="hljs-comment">//4. 处理右子树</span><br>        TreeNode right = lowestCommonAncestor(root.right, p, q);<br>        <span class="hljs-comment">//5. 处理结果</span><br>        <span class="hljs-keyword">if</span> (left != <span class="hljs-keyword">null</span> &amp;&amp; right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left == <span class="hljs-keyword">null</span> ? right : left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树</tag>
        <tag>最近公共祖先节点</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-239 滑动窗口最大值</title>
    <url>/2021/08/25/leetcode-239/</url>
    <content><![CDATA[<p>题目描述：给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p>
<p>返回滑动窗口中的最大值。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Window</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> LinkedList&lt;Integer&gt; queue;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Window</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Integer e)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty() &amp;&amp; queue.getLast() &lt; e) &#123;<br>            queue.pollLast();<br>        &#125;<br>        queue.addLast(e);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(Integer e)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (e.equals(queue.getFirst())) &#123;<br>            queue.removeFirst();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getMax</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queue.getFirst();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] maxSlidingWindow(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k) &#123;<br>        Window window = <span class="hljs-keyword">new</span> Window();<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length - k + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; i++) &#123;<br>            window.add(nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = k - <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            window.add(nums[i]);<br>            res[i - k + <span class="hljs-number">1</span>] = window.getMax();<br>            window.remove(nums[i - k + <span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度困难</tag>
        <tag>最大值</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-25 K个一组翻转链表</title>
    <url>/2021/07/27/leetcode-25/</url>
    <content><![CDATA[<p>题目描述：给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。你可以设计一个只使用常数额外空间的算法来解决此问题吗？你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p>
<a id="more"></a>

<h2 id="原题介绍"><a href="#原题介绍" class="headerlink" title="原题介绍"></a>原题介绍</h2><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><div><div class="graphviz">digraph leetcode_92_1 {
    
<pre><code>bgcolor=&quot;#f7f7f7&quot;

rankdir=LR
subgraph cluster_name &#123;
    
    subgraph cluster_1 &#123;
        n0 [label=&quot;1&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled]
        n1 [label=&quot;2&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled]
        n2 [label=&quot;3&quot; shape=circle,color=yellow,fillcolor=lightyellow,style=filled]
        n3 [label=&quot;4&quot; shape=circle,color=yellow,fillcolor=lightyellow,style=filled]
        n4 [label=&quot;5&quot; shape=circle,color=black,fillcolor=white,style=filled]
        rank=same;
        n0 -&gt; n1 -&gt; n2 -&gt; n3 -&gt; n4 
        style=invis
    &#125;

    subgraph cluster_2 &#123;
        r0 [label=&quot;2&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled]
        r1 [label=&quot;1&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled]
        r2 [label=&quot;4&quot; shape=circle,color=yellow,fillcolor=lightyellow,style=filled]
        r3 [label=&quot;3&quot; shape=circle,color=yellow,fillcolor=lightyellow,style=filled]
        r4 [label=&quot;5&quot; shape=circle,color=black,fillcolor=white,style=filled]

        rank=same;
        r0 -&gt; r1 -&gt; r2 -&gt; r3 -&gt; r4 
        style=invis
    &#125;    

    n2 -&gt; r2[constraint=false,color=&quot;red&quot;,pad=30]    

&#125;

label=&lt;&lt;B&gt;图 1.1 示例一&lt;/B&gt;&gt;
</code></pre>
<p>}</div></div></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">输入：head</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<span class="hljs-string">,</span> <span class="hljs-string">k</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><br><span class="hljs-string">输出：[2,1,4,3,5]</span><br></code></pre></td></tr></table></figure>



<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ListNode nextNode;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseKGroup</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span> || k == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 遍历计算链表长度</span><br>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>;<br>        ListNode node = head;<br>        <span class="hljs-keyword">while</span> (node.next != <span class="hljs-keyword">null</span>) &#123;<br>            node = node.next;<br>            len++;<br>        &#125;<br><br>        <span class="hljs-comment">//3. 每组k各元素，计算分组数</span><br>        <span class="hljs-keyword">int</span> group = len / k;<br><br>        <span class="hljs-comment">//4. 分别处理每个组，分别进行反转</span><br>        ListNode newHead = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> idx = <span class="hljs-number">1</span>; idx &lt;= group; idx++) &#123;<br>            newHead = reverseBetween(head, k * (idx - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>, k * idx);<br>            head = newHead;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反转链表区间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> head 链表头</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left 区间左</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right 区间右</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 新链表节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span> || right == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (left &gt; <span class="hljs-number">1</span>) &#123;<br>            head.next = reverseBetween(head.next, left - <span class="hljs-number">1</span>, right - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        <span class="hljs-keyword">return</span> reverse(head, right);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反转链表前right个节点</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> head  链表头</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right 前right个节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 新链表头</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span> || right == <span class="hljs-number">1</span>) &#123;<br>            nextNode = head.next;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        ListNode newHead = reverse(head.next, right - <span class="hljs-number">1</span>);<br>        head.next.next = head;<br>        head.next = nextNode;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>单链表</tag>
        <tag>反转</tag>
        <tag>难度困难</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-26 删除有序数组中的重复项</title>
    <url>/2021/09/10/leetcode-26/</url>
    <content><![CDATA[<p>题目描述：给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (right &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[right] != nums[left]) &#123;<br>                nums[++left] = nums[right];<br>            &#125;<br>            right++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度简单</tag>
        <tag>有序数组</tag>
        <tag>重复项</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-27 移除元素</title>
    <url>/2021/09/12/leetcode-27/</url>
    <content><![CDATA[<p>题目描述：给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-keyword">if</span> (nums[left] != val) &#123;<br>                left++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (nums[right] == val) &#123;<br>                right--;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> tmp = nums[left];<br>            nums[left] = nums[right];<br>            nums[right] = tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度简单</tag>
        <tag>重复项</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-283 移动零</title>
    <url>/2021/09/13/leetcode-283/</url>
    <content><![CDATA[<p>题目描述：给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveZeroes</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (right &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (nums[right] == <span class="hljs-number">0</span>) &#123;<br>                right++;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            nums[left++] = nums[right++];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            nums[left++] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度简单</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-295 数据流的中位数</title>
    <url>/2021/08/18/leetcode-295/</url>
    <content><![CDATA[<p>题目描述：中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p>
<p>例如，</p>
<p>[2,3,4] 的中位数是 3</p>
<p>[2,3] 的中位数是 (2 + 3) &#x2F; 2 &#x3D; 2.5</p>
<p>设计一个支持以下两种操作的数据结构：</p>
<p>void addNum(int num) - 从数据流中添加一个整数到数据结构中。<br>double findMedian() - 返回目前所有元素的中位数。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MedianFinder</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> PriorityQueue&lt;Integer&gt; small;<br>    <span class="hljs-keyword">private</span> PriorityQueue&lt;Integer&gt; large;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MedianFinder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.large = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;();<br>        <span class="hljs-keyword">this</span>.small = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((a, b) -&gt; b - a);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.small.size() &gt;= <span class="hljs-keyword">this</span>.large.size()) &#123;<br>            <span class="hljs-keyword">this</span>.small.add(num);<br>            <span class="hljs-keyword">this</span>.large.add(<span class="hljs-keyword">this</span>.small.poll());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">this</span>.large.add(num);<br>            <span class="hljs-keyword">this</span>.small.add(<span class="hljs-keyword">this</span>.large.poll());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedian</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.small.size() &gt; <span class="hljs-keyword">this</span>.large.size()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.small.peek();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.small.size() &lt; <span class="hljs-keyword">this</span>.large.size()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.large.peek();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.large.peek() + <span class="hljs-keyword">this</span>.small.peek()) / <span class="hljs-number">2.0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度困难</tag>
        <tag>中位数</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-297 二叉树的序列化与反序列化</title>
    <url>/2021/08/15/leetcode-297/</url>
    <content><![CDATA[<p>题目描述：序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。</p>
<p>请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 &#x2F; 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。</p>
<p>提示: 输入输出格式与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。</p>
<p><strong>提示：</strong></p>
<ul>
<li>树中结点数在范围 <code>[0, 104]</code> 内</li>
<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>
</ul>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="前序实现"><a href="#前序实现" class="headerlink" title="前序实现"></a>前序实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Codec</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 空节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String NULL_NODE = <span class="hljs-string">&quot;#&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分隔符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String SEPARATOR = <span class="hljs-string">&quot;,&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 前序序列化</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root TreeNode</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">serialize</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> NULL_NODE;<br>        &#125;<br>        <span class="hljs-keyword">return</span> String.valueOf(root.val) + SEPARATOR + serialize(root.left) + SEPARATOR + serialize(root.right);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化二叉树</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 二叉树根节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deserialize</span><span class="hljs-params">(String data)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 分离二叉树节点</span><br>        String[] allNodeVal = data.split(SEPARATOR);<br><br>        <span class="hljs-comment">//2. 尾插法二叉树节点</span><br>        LinkedList&lt;String&gt; nodes = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String nodeVal : allNodeVal) &#123;<br>            nodes.addLast(nodeVal);<br>        &#125;<br><br>        <span class="hljs-comment">//3. 递归处理二叉树节点</span><br>        <span class="hljs-keyword">return</span> deserialize(nodes);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递归反序列化二叉树</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nodes LinkedList&lt;String&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> TreeNode</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deserialize</span><span class="hljs-params">(LinkedList&lt;String&gt; nodes)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (nodes.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 处理非空节点</span><br>        String firstVal = nodes.removeFirst();<br>        <span class="hljs-keyword">if</span> (NULL_NODE.equals(firstVal)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        TreeNode node = <span class="hljs-keyword">new</span> TreeNode(Integer.parseInt(firstVal));<br><br>        <span class="hljs-comment">//3. 递归处理左子树</span><br>        node.left = deserialize(nodes);<br><br>        <span class="hljs-comment">//4. 递归处理右子树</span><br>        node.right = deserialize(nodes);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h3 id="后序实现"><a href="#后序实现" class="headerlink" title="后序实现"></a>后序实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Codec</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 空节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String NULL_NODE = <span class="hljs-string">&quot;#&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分隔符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String SEPARATOR = <span class="hljs-string">&quot;,&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 后序序列化</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root TreeNode</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">serialize</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> NULL_NODE;<br>        &#125;<br>        <span class="hljs-keyword">return</span> serialize(root.left) + SEPARATOR + serialize(root.right) + SEPARATOR + String.valueOf(root.val);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化二叉树</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 二叉树根节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deserialize</span><span class="hljs-params">(String data)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 分离二叉树节点</span><br>        String[] nodes = data.split(SEPARATOR);<br><br>        <span class="hljs-comment">//2. 头插法二叉树节点</span><br>        LinkedList&lt;String&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String node : nodes) &#123;<br>            list.addFirst(node);<br>        &#125;<br><br>        <span class="hljs-comment">//3. 递归处理二叉树节点</span><br>        <span class="hljs-keyword">return</span> deserialize(list);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递归反序列化二叉树</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nodes LinkedList&lt;String&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> TreeNode</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deserialize</span><span class="hljs-params">(LinkedList&lt;String&gt; nodes)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (nodes.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 处理非空节点</span><br>        String firstVal = nodes.removeFirst();<br>        <span class="hljs-keyword">if</span> (NULL_NODE.equals(firstVal)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(Integer.parseInt(firstVal));<br><br>        <span class="hljs-comment">//3. 递归处理右子树</span><br>        root.right = deserialize(nodes);<br><br>        <span class="hljs-comment">//4. 递归处理左子树</span><br>        root.left = deserialize(nodes);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="中序实现"><a href="#中序实现" class="headerlink" title="中序实现"></a>中序实现</h3><p>中序只能序列化，无法反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Codec</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 空节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String NULL_NODE = <span class="hljs-string">&quot;#&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分隔符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String SEPARATOR = <span class="hljs-string">&quot;,&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 中序序列化</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root TreeNode</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">serialize</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> NULL_NODE;<br>        &#125;<br>        <span class="hljs-keyword">return</span> serialize(root.left) + SEPARATOR + String.valueOf(root.val) + SEPARATOR + serialize(root.right);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化二叉树</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 二叉树根节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deserialize</span><span class="hljs-params">(String data)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="层序实现"><a href="#层序实现" class="headerlink" title="层序实现"></a>层序实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Codec</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 空节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String NULL_NODE = <span class="hljs-string">&quot;#&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分隔符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String SEPARATOR = <span class="hljs-string">&quot;,&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 层序列化</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root TreeNode</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">serialize</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 序列化字符串</span><br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br><br>        <span class="hljs-comment">//2. 判空</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//3. 层序遍历</span><br>        LinkedList&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        list.addLast(root);<br>        <span class="hljs-keyword">while</span> (!list.isEmpty()) &#123;<br>            TreeNode node = list.removeFirst();<br>            <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>                sb.append(NULL_NODE).append(SEPARATOR);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            sb.append(node.val).append(SEPARATOR);<br>            list.addLast(node.left);<br>            list.addLast(node.right);<br>        &#125;<br><br>        <span class="hljs-comment">//4. 排除最后一个多余的分隔符</span><br>        <span class="hljs-keyword">return</span> sb.substring(<span class="hljs-number">0</span>, sb.length() - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反序列化二叉树</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 二叉树根节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deserialize</span><span class="hljs-params">(String data)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 处理根节点</span><br>        String[] nodes = data.split(SEPARATOR);<br>        LinkedList&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(Integer.parseInt(nodes[<span class="hljs-number">0</span>]));<br><br>        <span class="hljs-comment">//3. 层序遍历</span><br>        list.addLast(root);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; nodes.length; ) &#123;<br>            TreeNode parent = list.removeFirst();<br>            <span class="hljs-comment">//3.1 处理左节点</span><br>            String left = nodes[i++];<br>            <span class="hljs-keyword">if</span> (NULL_NODE.equals(left)) &#123;<br>                parent.left = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.left = <span class="hljs-keyword">new</span> TreeNode(Integer.parseInt(left));<br>                list.addLast(parent.left);<br>            &#125;<br>            <span class="hljs-comment">//3.2 处理右节点</span><br>            String right = nodes[i++];<br>            <span class="hljs-keyword">if</span> (NULL_NODE.equals(right)) &#123;<br>                parent.right = <span class="hljs-keyword">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.right = <span class="hljs-keyword">new</span> TreeNode(Integer.parseInt(right));<br>                list.addLast(parent.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//4 返回根节点</span><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树</tag>
        <tag>序列化与反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-3 无重复字符的最长子串</title>
    <url>/2021/09/07/leetcode-3/</url>
    <content><![CDATA[<p>题目描述：给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        Map&lt;Character, Integer&gt; need = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>, start = <span class="hljs-number">0</span>, len = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (right &lt; s.length()) &#123;<br>            <span class="hljs-keyword">char</span> c = s.charAt(right);<br>            right++;<br>            need.merge(c, <span class="hljs-number">1</span>, (oldVal, newVal) -&gt; ++oldVal);<br>            <span class="hljs-keyword">while</span> (need.get(c).equals(<span class="hljs-number">2</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (right - <span class="hljs-number">1</span> - left &gt; len) &#123;<br>                    start = left;<br>                    len = right - <span class="hljs-number">1</span> - left;<br>                &#125;<br>                <span class="hljs-keyword">char</span> l = s.charAt(left);<br>                left++;<br>                need.compute(l, (k, v) -&gt; --v);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right - left &gt; len ? right - left : len;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>字符串</tag>
        <tag>无重复</tag>
        <tag>最长字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-300 最长递增子序列</title>
    <url>/2021/09/15/leetcode-300/</url>
    <content><![CDATA[<p>题目描述：给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p>
<p>子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.length &lt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> nums.length;<br>        &#125;<br>        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            dp[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] &lt; nums[i]) &#123;<br>                    dp[i] = Math.max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            res = Math.max(res, dp[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>递增子序列</tag>
        <tag>最长</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-341 扁平化嵌套列表迭代器</title>
    <url>/2021/08/16/leetcode-341/</url>
    <content><![CDATA[<p>题目描述：给你一个嵌套的整数列表 nestedList 。每个元素要么是一个整数，要么是一个列表；该列表的元素也可能是整数或者是其他列表。请你实现一个迭代器将其扁平化，使之能够遍历这个列表中的所有整数。</p>
<p>实现扁平迭代器类 NestedIterator ：</p>
<ol>
<li>NestedIterator(List<NestedInteger> nestedList) 用嵌套列表 nestedList 初始化迭代器。</li>
</ol>
<ul>
<li><p>int next() 返回嵌套列表的下一个整数。</p>
</li>
<li><p>boolean hasNext() 如果仍然存在待迭代的整数，返回 true ；否则，返回 false 。<br>你的代码将会用下述伪代码检测：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">initialize iterator with nestedList<br>res = []<br><span class="hljs-keyword">while</span> iterator.hasNext()<br>    append iterator.next() to the end of res<br><span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure>

<p>如果 res 与预期的扁平化列表匹配，那么你的代码将会被判为正确。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="NestedInteger"><a href="#NestedInteger" class="headerlink" title="NestedInteger"></a>NestedInteger</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedInteger</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;NestedInteger&gt; list;<br><br>    <span class="hljs-keyword">private</span> Integer node;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedInteger</span><span class="hljs-params">(Integer node)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.node = node;<br>        <span class="hljs-keyword">this</span>.list = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedInteger</span><span class="hljs-params">(List&lt;NestedInteger&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.list = list;<br>        <span class="hljs-keyword">this</span>.node = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">isInteger</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.node != <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getInteger</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.node;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;NestedInteger&gt; <span class="hljs-title">getList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.list;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> Iterator&lt;Integer&gt; it;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedIterator</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 扁平化展开嵌套列表</span><br>        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (NestedInteger nit : nestedList) &#123;<br>            traverse(nit, list);<br>        &#125;<br><br>        <span class="hljs-comment">//2. 处理展开后的列表</span><br>        <span class="hljs-keyword">this</span>.it = list.iterator();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.it.next();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.it.hasNext();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递归展开列表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> nit  NestedInteger</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list List&lt;Integer&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(NestedInteger nit, List&lt;Integer&gt; list)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nit.isInteger()) &#123;<br>            list.add(nit.getInteger());<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (NestedInteger childNit : nit.getList()) &#123;<br>            traverse(childNit, list);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h3 id="惰性实现"><a href="#惰性实现" class="headerlink" title="惰性实现"></a>惰性实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NestedIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator</span>&lt;<span class="hljs-title">Integer</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> LinkedList&lt;NestedInteger&gt; it;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NestedIterator</span><span class="hljs-params">(List&lt;NestedInteger&gt; nestedList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.it = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;(nestedList);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.it.remove(<span class="hljs-number">0</span>).getInteger();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断下一个原始是否是Integer</span><br><span class="hljs-comment">     * 如果是Integer则直接返回</span><br><span class="hljs-comment">     * 如果不是则使用头插法展开</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-keyword">this</span>.it.isEmpty() &amp;&amp; !<span class="hljs-keyword">this</span>.it.get(<span class="hljs-number">0</span>).isInteger()) &#123;<br>            List&lt;NestedInteger&gt; nit = <span class="hljs-keyword">this</span>.it.remove(<span class="hljs-number">0</span>).getList();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nit.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-keyword">this</span>.it.addFirst(nit.get(i));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> !<span class="hljs-keyword">this</span>.it.isEmpty();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树</tag>
        <tag>扁平化迭代器</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-344 反转字符串</title>
    <url>/2021/09/04/leetcode-344/</url>
    <content><![CDATA[<p>题目描述：编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p>
<p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p>
<p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] s)</span> </span>&#123;<br>        <span class="hljs-keyword">boolean</span> odd = s.length % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> half = s.length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= half; i++) &#123;<br>            <span class="hljs-keyword">char</span> c = s[i];<br>            s[i] = s[s.length - <span class="hljs-number">1</span> - i];<br>            s[s.length - <span class="hljs-number">1</span> - i] = c;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度简单</tag>
        <tag>反转字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-354 俄罗斯套娃信封问题</title>
    <url>/2021/09/16/leetcode-354/</url>
    <content><![CDATA[<p>题目描述：给你一个二维整数数组 envelopes ，其中 envelopes[i] &#x3D; [wi, hi] ，表示第 i 个信封的宽度和高度。</p>
<p>当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p>
<p>请计算 最多能有多少个 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxEnvelopes</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] envelopes)</span> </span>&#123;<br>        Arrays.sort(envelopes, (o1, o2) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (o1[<span class="hljs-number">0</span>] == o2[<span class="hljs-number">0</span>]) &#123;<br>                <span class="hljs-keyword">return</span> o2[<span class="hljs-number">1</span>] - o1[<span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> o1[<span class="hljs-number">0</span>] - o2[<span class="hljs-number">0</span>];<br>        &#125;);<br>        <span class="hljs-keyword">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[envelopes.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; envelopes.length; i++) &#123;<br>            nums[i] = envelopes[i][<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> lengthOfLIS(nums);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (nums.length &lt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> nums.length;<br>        &#125;<br>        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            dp[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[j] &lt; nums[i]) &#123;<br>                    dp[i] = Math.max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            res = Math.max(res, dp[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度困难</tag>
        <tag>俄罗斯套娃</tag>
        <tag>信封</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-355 设计推特</title>
    <url>/2021/08/22/leetcode-355/</url>
    <content><![CDATA[<p>题目描述：设计一个简化版的推特(Twitter)，可以让用户实现发送推文，关注&#x2F;取消关注其他用户，能够看见关注人（包括自己）的最近十条推文。你的设计需要支持以下的几个功能：</p>
<ol>
<li>postTweet(userId, tweetId): 创建一条新的推文</li>
<li>getNewsFeed(userId): 检索最近的十条推文。每个推文都必须是由此用户关注的人或者是用户自己发出的。推文必须按照时间顺序由最近的开始排序。</li>
<li>follow(followerId, followeeId): 关注一个用户</li>
<li>unfollow(followerId, followeeId): 取消关注一个用户</li>
</ol>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tweet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Tweet</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer tweetId;<br><br>    <span class="hljs-keyword">private</span> Long createTime;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Tweet</span><span class="hljs-params">(Integer tweetId, Long createTime)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tweetId = tweetId;<br>        <span class="hljs-keyword">this</span>.createTime = createTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getTweetId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> tweetId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTweetId</span><span class="hljs-params">(Integer tweetId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tweetId = tweetId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">getCreateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> createTime;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCreateTime</span><span class="hljs-params">(Long createTime)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.createTime = createTime;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Tweet o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) (<span class="hljs-keyword">this</span>.createTime - o.getCreateTime());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Tweet&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;tweetId=&quot;</span> + tweetId +<br>                <span class="hljs-string">&quot;, createTime=&quot;</span> + createTime +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer userId;<br><br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; followerIds;<br><br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; followeeIds;<br><br>    <span class="hljs-keyword">private</span> LinkedList&lt;Tweet&gt; tweets;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(Integer userId, List&lt;Integer&gt; followerIds, List&lt;Integer&gt; followeeIds, LinkedList&lt;Tweet&gt; tweets)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userId = userId;<br>        <span class="hljs-keyword">this</span>.followerIds = followerIds;<br>        <span class="hljs-keyword">this</span>.followeeIds = followeeIds;<br>        <span class="hljs-keyword">this</span>.tweets = tweets;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getUserId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> userId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserId</span><span class="hljs-params">(Integer userId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userId = userId;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getFollowerIds</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> followerIds;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFollowerIds</span><span class="hljs-params">(List&lt;Integer&gt; followerIds)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.followerIds = followerIds;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getFolloweeIds</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> followeeIds;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFolloweeIds</span><span class="hljs-params">(List&lt;Integer&gt; followeeIds)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.followeeIds = followeeIds;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> LinkedList&lt;Tweet&gt; <span class="hljs-title">getTweets</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> tweets;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTweets</span><span class="hljs-params">(LinkedList&lt;Tweet&gt; tweets)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.tweets = tweets;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;userId=&quot;</span> + userId +<br>                <span class="hljs-string">&quot;, followerIds=&quot;</span> + followerIds +<br>                <span class="hljs-string">&quot;, followeeIds=&quot;</span> + followeeIds +<br>                <span class="hljs-string">&quot;, tweets=&quot;</span> + tweets +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Twitter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Map&lt;Integer, User&gt; users;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Twitter</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.users = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postTweet</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId, <span class="hljs-keyword">int</span> tweetId)</span> </span>&#123;<br>        Tweet tweet = <span class="hljs-keyword">new</span> Tweet(tweetId, System.nanoTime());<br>        User user = <span class="hljs-keyword">this</span>.users.getOrDefault(userId, createUser(userId));<br>        user.getTweets().addFirst(tweet);<br>        <span class="hljs-keyword">if</span> (user.getTweets().size() &gt; <span class="hljs-number">10</span>) &#123;<br>            user.getTweets().subList(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>        &#125;<br>        <span class="hljs-keyword">this</span>.users.put(userId, user);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">getNewsFeed</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.users.containsKey(userId)) &#123;<br>            List&lt;Tweet&gt; tweets = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>            tweets.addAll(<span class="hljs-keyword">this</span>.users.get(userId).getTweets());<br>            <span class="hljs-keyword">this</span>.users.get(userId).getFollowerIds().stream().map(<span class="hljs-keyword">this</span>.users::get).map(User::getTweets).forEach(list -&gt; tweets.addAll(list));<br>            List&lt;Integer&gt; result = tweets.stream().sorted(Comparator.reverseOrder()).distinct().map(Tweet::getTweetId).collect(Collectors.toList());<br>            <span class="hljs-keyword">return</span> result.size() &gt; <span class="hljs-number">10</span> ? result.subList(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>) : result;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">follow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> followerId, <span class="hljs-keyword">int</span> followeeId)</span> </span>&#123;<br>        User follower = <span class="hljs-keyword">this</span>.users.getOrDefault(followerId, createUser(followerId));<br>        follower.getFollowerIds().add(followeeId);<br>        <span class="hljs-keyword">this</span>.users.put(followerId, follower);<br>        User followee = <span class="hljs-keyword">this</span>.users.getOrDefault(followeeId, createUser(followeeId));<br>        followee.getFolloweeIds().add(followerId);<br>        <span class="hljs-keyword">this</span>.users.put(followeeId, followee);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unfollow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> followerId, <span class="hljs-keyword">int</span> followeeId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.users.get(followerId).getFollowerIds().remove((Object) followeeId);<br>        <span class="hljs-keyword">this</span>.users.get(followeeId).getFolloweeIds().remove((Object) followerId);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> User <span class="hljs-title">createUser</span><span class="hljs-params">(Integer userId)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(userId, <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(), <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(), <span class="hljs-keyword">new</span> LinkedList&lt;&gt;());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>算法设计</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-380  O(1) 时间插入、删除和获取随机元素</title>
    <url>/2021/09/08/leetcode-380/</url>
    <content><![CDATA[<p>题目描述：设计一个支持在平均 时间复杂度 O(1) 下，执行以下操作的数据结构。</p>
<p>insert(val)：当元素 val 不存在时，向集合中插入该项。<br>remove(val)：元素 val 存在时，从集合中移除该项。<br>getRandom：随机返回现有集合中的一项。每个元素应该有相同的概率被返回。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RandomizedSet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; array;<br>    <span class="hljs-keyword">private</span> Map&lt;Integer, Integer&gt; valToIndex;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RandomizedSet</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.array = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">this</span>.valToIndex = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.valToIndex.containsKey(val)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.array.add(val);<br>        <span class="hljs-keyword">this</span>.valToIndex.put(val, <span class="hljs-keyword">this</span>.array.size() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.valToIndex.containsKey(val)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> idx = <span class="hljs-keyword">this</span>.valToIndex.get(val);<br>        <span class="hljs-keyword">int</span> tmp = <span class="hljs-keyword">this</span>.array.get(idx);<br>        <span class="hljs-keyword">this</span>.array.set(idx, <span class="hljs-keyword">this</span>.array.get(<span class="hljs-keyword">this</span>.array.size() - <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">this</span>.valToIndex.put(<span class="hljs-keyword">this</span>.array.get(idx), idx);<br>        <span class="hljs-keyword">this</span>.array.set(<span class="hljs-keyword">this</span>.array.size() - <span class="hljs-number">1</span>, tmp);<br>        <span class="hljs-keyword">this</span>.array.remove(<span class="hljs-keyword">this</span>.array.size() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">this</span>.valToIndex.remove(val);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRandom</span><span class="hljs-params">()</span> </span>&#123;<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">int</span> index = random.nextInt(<span class="hljs-keyword">this</span>.array.size());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.array.get(index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>算法设计</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-410 分割数组的最大值</title>
    <url>/2021/08/29/leetcode-410/</url>
    <content><![CDATA[<p>题目描述：给定一个非负整数数组 <code>nums</code> 和一个整数 <code>m</code> ，你需要将这个数组分成 <code>m</code> 个非空的连续子数组。</p>
<p>设计一个算法使得这 <code>m</code> 个子数组各自和的最大值最小。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">splitArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> m)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> minSum = Integer.MIN_VALUE;<br>        <span class="hljs-keyword">int</span> maxSum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> len = nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; minSum) &#123;<br>                minSum = nums[i];<br>            &#125;<br>            maxSum += nums[i];<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> left = minSum;<br>        <span class="hljs-keyword">int</span> right = maxSum + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> currentM = calculateM(nums, mid);<br>            <span class="hljs-keyword">if</span> (currentM == m) &#123;<br>                right = mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentM &gt; m) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (currentM &lt; m) &#123;<br>                right = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculateM</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> sum)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> tmpSum = sum;<br>        <span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; nums.length) &#123;<br>            <span class="hljs-keyword">if</span> (tmpSum &gt;= nums[i]) &#123;<br>                tmpSum -= nums[i];<br>                i++;<br>                <span class="hljs-keyword">if</span> (i == nums.length) &#123;<br>                    m++;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                tmpSum = sum;<br>                m++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> m;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>二分查找</tag>
        <tag>难度中等</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-438 找到字符串中所有字母异位词</title>
    <url>/2021/09/06/leetcode-438/</url>
    <content><![CDATA[<p>题目描述：给定两个字符串 s 和 p，找到 s 中所有 p 的 异位词 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>
<p>异位词 指字母相同，但排列不同的字符串。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">findAnagrams</span><span class="hljs-params">(String s, String p)</span> </span>&#123;<br>        Map&lt;Character, Integer&gt; need = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        Map&lt;Character, Integer&gt; window = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; p.length(); i++) &#123;<br>            need.merge(p.charAt(i), <span class="hljs-number">1</span>, (oldVal, newVal) -&gt; ++oldVal);<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>, valid = <span class="hljs-number">0</span>;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">while</span> (right &lt; s.length()) &#123;<br>            <span class="hljs-keyword">char</span> r = s.charAt(right);<br>            right++;<br>            <span class="hljs-keyword">if</span> (need.containsKey(r)) &#123;<br>                window.merge(r, <span class="hljs-number">1</span>, (oldVal, newVal) -&gt; ++oldVal);<br>                <span class="hljs-keyword">if</span> (window.get(r).equals(need.get(r))) &#123;<br>                    valid++;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">while</span> (right - left == p.length()) &#123;<br>                <span class="hljs-keyword">if</span> (valid == need.size()) &#123;<br>                    res.add(left);<br>                &#125;<br>                <span class="hljs-keyword">char</span> l = s.charAt(left);<br>                left++;<br>                <span class="hljs-keyword">if</span> (need.containsKey(l)) &#123;<br>                    <span class="hljs-keyword">if</span> (window.get(l).equals(need.get(l))) &#123;<br>                        valid--;<br>                    &#125;<br>                    window.compute(l, (k, v) -&gt; --v);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>字符串</tag>
        <tag>排列</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-450 删除二叉搜索树中的节点</title>
    <url>/2021/08/10/leetcode-450/</url>
    <content><![CDATA[<p>题目描述：给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。一般来说，删除节点可分为两个步骤：</p>
<ul>
<li><p>首先找到需要删除的节点；</p>
</li>
<li><p>如果找到了，删除它。</p>
</li>
</ul>
<p>说明： 要求算法时间复杂度为 O(h)，h 为树的高度。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deleteNode</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.val == key) &#123;<br>            <span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> root.right;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (root.right == <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> root.left;<br>            &#125;<br>            TreeNode minNode = getMinNode(root.right);<br>            root.val = minNode.val;<br>            root.right = deleteNode(root.right, minNode.val);<br>            <span class="hljs-keyword">return</span> root;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root.val &gt; key) &#123;<br>            root.left = deleteNode(root.left, key);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root.val &lt; key) &#123;<br>            root.right = deleteNode(root.right, key);<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> TreeNode <span class="hljs-title">getMinNode</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (root.left != <span class="hljs-keyword">null</span>) &#123;<br>            root = root.left;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉搜索树</tag>
        <tag>删除节点</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-496 下一个更大元素 I</title>
    <url>/2021/08/23/leetcode-496/</url>
    <content><![CDATA[<p>题目描述：给你两个 没有重复元素 的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。</p>
<p>请你找出 nums1 中每个元素在 nums2 中的下一个比其大的值。</p>
<p>nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出 -1 。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] nextGreaterElement(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span>[] nums2) &#123;<br>        Map&lt;Integer, Integer&gt; maps = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nums2.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt; nums2[i]) &#123;<br>                stack.pop();<br>            &#125;<br>            Integer nextMaxVal = stack.isEmpty() ? -<span class="hljs-number">1</span> : stack.peek();<br>            maps.put(nums2[i], nextMaxVal);<br>            stack.add(nums2[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums1.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums1.length; i++) &#123;<br>            res[i] = maps.get(nums1[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度简单</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-503 下一个更大元素 II</title>
    <url>/2021/08/24/leetcode-503/</url>
    <content><![CDATA[<p>题目描述：给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] nextGreaterElements(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">int</span>[] cycle = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length * <span class="hljs-number">2</span>];<br>        System.arraycopy(nums, <span class="hljs-number">0</span>, cycle, <span class="hljs-number">0</span>, nums.length);<br>        System.arraycopy(nums, <span class="hljs-number">0</span>, cycle, nums.length, nums.length);<br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[cycle.length];<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = cycle.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() &lt;= cycle[i]) &#123;<br>                stack.pop();<br>            &#125;<br>            <span class="hljs-keyword">int</span> nextMax = stack.isEmpty() ? -<span class="hljs-number">1</span> : stack.peek();<br>            res[i] = nextMax;<br>            stack.push(cycle[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Arrays.copyOf(res,nums.length);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-53 最大子序和</title>
    <url>/2021/09/17/leetcode-53/</url>
    <content><![CDATA[<p>题目描述：给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>        dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            dp[i] = Math.max(nums[i], dp[i - <span class="hljs-number">1</span>] + nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">int</span> res = Integer.MIN_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            res = Math.max(res, dp[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度简单</tag>
        <tag>数组</tag>
        <tag>子数和</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-538 把二叉搜索树转换为累加树</title>
    <url>/2021/08/06/leetcode-538/</url>
    <content><![CDATA[<p>题目描述：给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。</p>
<p>提醒一下，二叉搜索树满足下列约束条件：</p>
<ul>
<li>节点的左子树仅包含键 小于 节点键的节点。</li>
<li>节点的右子树仅包含键 大于 节点键的节点。</li>
<li>左右子树也必须是二叉搜索树。</li>
</ul>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="后序实现"><a href="#后序实现" class="headerlink" title="后序实现"></a>后序实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;TreeNode&gt; nodes = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">convertBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        inorders(root);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; nodes.size(); i++) &#123;<br>            nodes.get(i).val = nodes.get(i - <span class="hljs-number">1</span>).val + nodes.get(i).val;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inorders</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inorders(root.right);<br>        nodes.add(root);<br>        inorders(root.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="递归优化"><a href="#递归优化" class="headerlink" title="递归优化"></a>递归优化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">convertBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        inorders(root);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inorders</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        inorders(root.right);<br>        sum += root.val;<br>        root.val = sum;<br>        inorders(root.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉搜索时树</tag>
        <tag>累加树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-567 字符串的排列</title>
    <url>/2021/09/05/leetcode-567/</url>
    <content><![CDATA[<p>题目描述：给你两个字符串 <code>s1</code> 和 <code>s2</code> ，写一个函数来判断 <code>s2</code> 是否包含 <code>s1</code> 的排列。</p>
<p>换句话说，<code>s1</code> 的排列之一是 <code>s2</code> 的 <strong>子串</strong> 。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkInclusion</span><span class="hljs-params">(String s1, String s2)</span> </span>&#123;<br>        Map&lt;Character, Integer&gt; need = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        Map&lt;Character, Integer&gt; window = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s1.length(); i++) &#123;<br>            need.merge(s1.charAt(i), <span class="hljs-number">1</span>, (oldVal, newVal) -&gt; ++oldVal);<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>, valid = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (right &lt; s2.length()) &#123;<br>            <span class="hljs-keyword">char</span> r = s2.charAt(right);<br>            right++;<br>            <span class="hljs-keyword">if</span> (need.containsKey(r)) &#123;<br>                window.merge(r, <span class="hljs-number">1</span>, (oldVal, newVal) -&gt; ++oldVal);<br>                <span class="hljs-keyword">if</span> (window.get(r).equals(need.get(r))) &#123;<br>                    valid++;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">while</span> (right - left == s1.length()) &#123;<br>                <span class="hljs-keyword">if</span> (valid == need.size()) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">char</span> l = s2.charAt(left);<br>                left++;<br>                <span class="hljs-keyword">if</span> (need.containsKey(l)) &#123;<br>                    <span class="hljs-keyword">if</span> (window.get(l).equals(need.get(l))) &#123;<br>                        valid--;<br>                    &#125;<br>                    window.compute(l, (k, v) -&gt; --v);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>字符串</tag>
        <tag>排列</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-583 两个字符串的删除操作</title>
    <url>/2021/09/19/leetcode-583/</url>
    <content><![CDATA[<p>题目描述：给定两个单词 <em>word1</em> 和 <em>word2</em>，找到使得 <em>word1</em> 和 <em>word2</em> 相同所需的最小步数，每步可以删除任意一个字符串中的一个字符。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minDistance</span><span class="hljs-params">(String word1, String word2)</span> </span>&#123;<br>        <span class="hljs-keyword">char</span>[] nums1 = word1.toCharArray();<br>        <span class="hljs-keyword">char</span>[] nums2 = word2.toCharArray();<br>        <span class="hljs-keyword">int</span> longestCommon = longestCommonSubsequence(nums1, nums2);<br>        <span class="hljs-keyword">return</span> nums1.length + nums2.length - longestCommon * <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] nums1, <span class="hljs-keyword">char</span>[] nums2)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums1.length + <span class="hljs-number">1</span>][nums2.length + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nums1.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= nums2.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums1[i - <span class="hljs-number">1</span>] == nums2[j - <span class="hljs-number">1</span>]) &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dp[i][j] = Math.max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[nums1.length][nums2.length];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>字符串</tag>
        <tag>删除</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-652 寻找重复的子树</title>
    <url>/2021/08/04/leetcode-652/</url>
    <content><![CDATA[<p>题目描述：给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意<strong>一棵</strong>的根结点即可。</p>
<p>两棵树重复是指它们具有相同的结构以及相同的结点值。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> HashMap&lt;String, Integer&gt; subTrees = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();<br><br>    <span class="hljs-keyword">private</span> List&lt;TreeNode&gt; duplicate = <span class="hljs-keyword">new</span> ArrayList&lt;TreeNode&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;TreeNode&gt; <span class="hljs-title">findDuplicateSubtrees</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        findDuplicateSubtrees(root);<br>        <span class="hljs-keyword">return</span> duplicate;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">postorder</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#&quot;</span>;<br>        &#125;<br>        String left = postorder(root.left);<br>        String right = postorder(root.right);<br>        String subTree = left + <span class="hljs-string">&quot;,&quot;</span> + right + <span class="hljs-string">&quot;,&quot;</span> + root.val;<br>        <span class="hljs-keyword">int</span> frequency = subTrees.getOrDefault(subTree, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (frequency == <span class="hljs-number">1</span>) &#123;<br>            duplicate.add(root);<br>        &#125;<br>        subTrees.put(subTree, frequency + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> subTree;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树</tag>
        <tag>重复子树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-654 最大二叉树</title>
    <url>/2021/08/01/leetcode-654/</url>
    <content><![CDATA[<p>题目描述：给定一个不含重复元素的整数数组 nums 。一个以此数组直接递归构建的 最大二叉树 定义如下：</p>
<ul>
<li>二叉树的根是数组 nums 中的最大元素。</li>
<li>左子树是通过数组中 最大值左边部分 递归构造出的最大二叉树。</li>
<li>右子树是通过数组中 最大值右边部分 递归构造出的最大二叉树。</li>
</ul>
<p>返回有给定数组 nums 构建的 最大二叉树 。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">constructMaximumBinaryTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> constructMaximumBinaryTree(nums, <span class="hljs-number">0</span>, nums.length);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">constructMaximumBinaryTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空</span><br>        <span class="hljs-keyword">if</span> (start &gt;= end) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 单个元素直接返回</span><br>        <span class="hljs-keyword">if</span> (start == end - <span class="hljs-number">1</span>) &#123;<br>            TreeNode node = <span class="hljs-keyword">new</span> TreeNode(nums[start]);<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br><br>        <span class="hljs-comment">//3. 寻找最大元素</span><br>        <span class="hljs-keyword">int</span> maxVal = nums[start];<br>        <span class="hljs-keyword">int</span> maxIdx = start;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> idx = start; idx &lt; end; idx++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[idx] &gt; maxVal) &#123;<br>                maxVal = nums[idx];<br>                maxIdx = idx;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//4. 最大元素为根节点</span><br>        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(maxVal);<br><br>        <span class="hljs-comment">//5. 最大元素左边为左子树</span><br>        TreeNode leftNode = constructMaximumBinaryTree(nums, start, maxIdx);<br><br>        <span class="hljs-comment">//6. 最大元素右边为右子树</span><br>        TreeNode rightNode = constructMaximumBinaryTree(nums, maxIdx + <span class="hljs-number">1</span>, end);<br><br>        <span class="hljs-comment">//7. 连接左右子树</span><br>        root.left = leftNode;<br>        root.right = rightNode;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-700 二叉搜索树中的搜索</title>
    <url>/2021/08/12/leetcode-700/</url>
    <content><![CDATA[<p>题目描述：给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。</p>
<p>提示：</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> TreeNode searchNode;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">searchBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        search(root, val);<br>        <span class="hljs-keyword">return</span> searchNode;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.val == val) &#123;<br>            searchNode = root;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.val &gt; val) &#123;<br>            search(root.left, val);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root.val &lt; val) &#123;<br>            search(root.right, val);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>二叉搜索树</tag>
        <tag>难度简单</tag>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-701 二叉搜索树中的插入操作</title>
    <url>/2021/08/11/leetcode-701/</url>
    <content><![CDATA[<p>题目描述：给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p>
<p>提示：</p>
<ul>
<li>给定的树上的节点数介于 0 和 10^4 之间</li>
<li>每个节点都有一个唯一整数值，取值范围从 0 到 10^8</li>
<li>-10^8 &lt;&#x3D; val &lt;&#x3D; 10^8</li>
<li>新值和原始二叉搜索树中的任意节点值都不同</li>
</ul>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">insertIntoBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TreeNode(val);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.val &gt; val) &#123;<br>            root.left = insertIntoBST(root.left, val);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root.val &lt; val) &#123;<br>            root.right = insertIntoBST(root.right, val);<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉搜索树</tag>
        <tag>插入</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-710 黑名单中的随机数</title>
    <url>/2021/09/09/leetcode-710/</url>
    <content><![CDATA[<p>题目描述：给定一个包含 [0，n) 中不重复整数的黑名单 blacklist ，写一个函数从 [0, n) 中返回一个不在 blacklist 中的随机整数。</p>
<p>对它进行优化使其尽量少调用系统方法 Math.random() 。</p>
<p>提示:</p>
<p>1 &lt;&#x3D; n &lt;&#x3D; 1000000000<br>0 &lt;&#x3D; blacklist.length &lt; min(100000, N)<br>[0, n) 不包含 n ，详细参见 interval notation 。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Map&lt;Integer, Integer&gt; blackMapping;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> N;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Solution</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span>[] blacklist)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.N = n;<br>        <span class="hljs-keyword">this</span>.blackMapping = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> b : blacklist) &#123;<br>            <span class="hljs-keyword">this</span>.blackMapping.put(b, -<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">int</span> whiteSize = <span class="hljs-keyword">this</span>.N - blacklist.length;<br>        <span class="hljs-keyword">int</span> left = whiteSize;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> b : blacklist) &#123;<br>            <span class="hljs-keyword">if</span> (b &lt; whiteSize) &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-keyword">this</span>.blackMapping.containsKey(left)) &#123;<br>                    left++;<br>                &#125;<br>                <span class="hljs-keyword">this</span>.blackMapping.put(b, left++);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pick</span><span class="hljs-params">()</span> </span>&#123;<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">int</span> idx = random.nextInt(N - <span class="hljs-keyword">this</span>.blackMapping.size());<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.blackMapping.containsKey(idx)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.blackMapping.get(idx);<br>        &#125;<br>        <span class="hljs-keyword">return</span> idx;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度困难</tag>
        <tag>黑名单</tag>
        <tag>随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-712 两个字符串的最小ASCII删除和</title>
    <url>/2021/09/20/leetcode-712/</url>
    <content><![CDATA[<p>题目描述：给定两个字符串<code>s1, s2</code>，找到使两个字符串相等所需删除字符的ASCII值的最小和。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> seqLen;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> sumAsc;<br>    <span class="hljs-keyword">private</span> String longestSeq;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSeqLen</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> seqLen;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSeqLen</span><span class="hljs-params">(<span class="hljs-keyword">int</span> seqLen)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.seqLen = seqLen;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getLongestSeq</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> longestSeq;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setLongestSeq</span><span class="hljs-params">(String longestSeq)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.longestSeq = longestSeq;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSumAsc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> sumAsc;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSumAsc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sumAsc)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sumAsc = sumAsc;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(<span class="hljs-keyword">int</span> seqLen, <span class="hljs-keyword">int</span> sumAsc, String longestSeq)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.seqLen = seqLen;<br>        <span class="hljs-keyword">this</span>.sumAsc = sumAsc;<br>        <span class="hljs-keyword">this</span>.longestSeq = longestSeq;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minimumDeleteSum</span><span class="hljs-params">(String s1, String s2)</span> </span>&#123;<br>        Node maxNode = longestCommonSubsequence(s1.toCharArray(), s2.toCharArray());<br>        <span class="hljs-keyword">int</span> sumS1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s1.length(); i++) &#123;<br>            sumS1 += s1.charAt(i);<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> sumS2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s2.length(); i++) &#123;<br>            sumS2 += s2.charAt(i);<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> sumM = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxNode.getLongestSeq().length(); i++) &#123;<br>            sumM += maxNode.getLongestSeq().charAt(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sumS1 + sumS2 - sumM * <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] nums1, <span class="hljs-keyword">char</span> nums2[])</span> </span>&#123;<br>        Node[][] dp = <span class="hljs-keyword">new</span> Node[nums1.length + <span class="hljs-number">1</span>][nums2.length + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= nums1.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= nums2.length; j++) &#123;<br>                dp[i][j] = <span class="hljs-keyword">new</span> Node(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= nums1.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= nums2.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums1[i - <span class="hljs-number">1</span>] == nums2[j - <span class="hljs-number">1</span>]) &#123;<br>                    dp[i][j].setSeqLen(dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>].getSeqLen() + <span class="hljs-number">1</span>);<br>                    dp[i][j].setLongestSeq(dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>].getLongestSeq() + nums1[i - <span class="hljs-number">1</span>]);<br>                    dp[i][j].setSumAsc(dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>].getSumAsc() + nums1[i - <span class="hljs-number">1</span>]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    Node rNode = dp[i - <span class="hljs-number">1</span>][j];<br>                    Node cNode = dp[i][j - <span class="hljs-number">1</span>];<br>                    Node maxNode = <span class="hljs-keyword">null</span>;<br>                    <span class="hljs-keyword">if</span> (rNode.getSeqLen() == cNode.getSeqLen()) &#123;<br>                        maxNode = rNode.getSumAsc() &gt; cNode.getSumAsc() ? rNode : cNode;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rNode.getSeqLen() &lt; cNode.getSeqLen()) &#123;<br>                        maxNode = cNode;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        maxNode = rNode;<br>                    &#125;<br>                    dp[i][j] = maxNode;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[nums1.length][nums2.length];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>字符串</tag>
        <tag>最小ASCII删除和</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-72 编辑距离</title>
    <url>/2021/09/14/leetcode-72/</url>
    <content><![CDATA[<p>题目描述：给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</p>
<p>你可以对一个单词进行如下三种操作：</p>
<p>插入一个字符<br>删除一个字符<br>替换一个字符</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minDistance</span><span class="hljs-params">(String word1, String word2)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> m = word1.length(), n = word2.length();<br>        <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m + <span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m + <span class="hljs-number">1</span>; i++) &#123;<br>            dp[i][<span class="hljs-number">0</span>] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n + <span class="hljs-number">1</span>; j++) &#123;<br>            dp[<span class="hljs-number">0</span>][j] = j;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (word1.charAt(i - <span class="hljs-number">1</span>) == word2.charAt(j - <span class="hljs-number">1</span>)) &#123;<br>                    dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    dp[i][j] = min(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[m][n];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">(<span class="hljs-keyword">int</span> dp1, <span class="hljs-keyword">int</span> dp2, <span class="hljs-keyword">int</span> dp3)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Math.min(Math.min(dp1, dp2), dp3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度困难</tag>
        <tag>两个单词</tag>
        <tag>转换</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-76 最小覆盖子串</title>
    <url>/2021/09/05/leetcode-76/</url>
    <content><![CDATA[<p>题目描述：给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回 <code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果 <code>s</code> 中不存在涵盖 <code>t</code> 所有字符的子串，则返回空字符串 <code>&quot;&quot;</code> 。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">minWindow</span><span class="hljs-params">(String s, String t)</span> </span>&#123;<br>        Map&lt;Character, Integer&gt; need = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        Map&lt;Character, Integer&gt; window = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t.length(); i++) &#123;<br>            need.merge(t.charAt(i), <span class="hljs-number">1</span>, (oldVal, newVal) -&gt; ++oldVal);<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>, start = <span class="hljs-number">0</span>, valid = <span class="hljs-number">0</span>, len = s.length() + <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">while</span> (right &lt; s.length()) &#123;<br>            <span class="hljs-keyword">char</span> c = s.charAt(right);<br>            right++;<br>            <span class="hljs-keyword">if</span> (need.containsKey(c)) &#123;<br>                window.merge(c, <span class="hljs-number">1</span>, (oldVal, newVal) -&gt; ++oldVal);<br>                <span class="hljs-keyword">if</span> (need.get(c).equals(window.get(c))) &#123;<br>                    valid++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (valid == need.size()) &#123;<br>                <span class="hljs-keyword">if</span> (right - left &lt; len) &#123;<br>                    start = left;<br>                    len = right - left;<br>                &#125;<br>                <span class="hljs-keyword">char</span> l = s.charAt(left);<br>                left++;<br>                <span class="hljs-keyword">if</span> (need.containsKey(l)) &#123;<br>                    <span class="hljs-keyword">if</span> (window.get(l).equals(need.get(l))) &#123;<br>                        valid--;<br>                    &#125;<br>                    window.compute(l, (k, v) -&gt; --v);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> len == s.length() + <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;&quot;</span> : s.substring(start, start + len);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>字符串</tag>
        <tag>难度困难</tag>
        <tag>子串</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-797 所有可能的路径</title>
    <url>/2021/08/14/leetcode-797/</url>
    <content><![CDATA[<p>题目描述：给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。提示：</p>
<ul>
<li>n &#x3D;&#x3D; graph.length</li>
<li>2 &lt;&#x3D; n &lt;&#x3D; 15</li>
<li>0 &lt;&#x3D; graph[i][j] &lt; n</li>
<li>graph[i][j] !&#x3D; i </li>
<li>保证输入为有向无环图 (GAD)</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;List&lt;Integer&gt;&gt; allPaths = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; allPathsSourceTarget(<span class="hljs-keyword">int</span>[][] graph) &#123;<br>        List&lt;Integer&gt; path = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>        path.add(<span class="hljs-number">0</span>);<br>        allPathsSourceTarget(graph, <span class="hljs-number">0</span>, graph.length - <span class="hljs-number">1</span>, path);<br>        <span class="hljs-keyword">return</span> allPaths;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">allPathsSourceTarget</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] graph, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> n, List&lt;Integer&gt; path)</span> </span>&#123;<br>        List&lt;Integer&gt; currentPath = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(path);<br>        <span class="hljs-keyword">if</span> (k == n) &#123;<br>            allPaths.add(currentPath);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : graph[k])&#123;<br>            currentPath.add(i);<br>            allPathsSourceTarget(graph, i, n, currentPath);<br>            currentPath.remove(currentPath.size() - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>有向无环图</tag>
        <tag>遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-83 删除排序链表中的重复元素</title>
    <url>/2021/09/11/leetcode-83/</url>
    <content><![CDATA[<p>题目描述：存在一个按升序排列的链表，给你这个链表的头节点 <code>head</code> ，请你删除所有重复的元素，使每个元素 <strong>只出现一次</strong> 。</p>
<p>返回同样按升序排列的结果链表。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        ListNode left = head, right = head.next;<br>        <span class="hljs-keyword">while</span> (right != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (left.val != right.val) &#123;<br>                left.next = right;<br>                left = left.next;<br>            &#125;<br>            right = right.next;<br>        &#125;<br>        left.next = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度简单</tag>
        <tag>重复项</tag>
        <tag>有序链表</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-870 优势洗牌</title>
    <url>/2021/08/26/leetcode-870/</url>
    <content><![CDATA[<p>题目描述：给定两个大小相等的数组 A 和 B，A 相对于 B 的优势可以用满足 A[i] &gt; B[i] 的索引 i 的数目来描述。</p>
<p>返回 A 的任意排列，使其相对于 B 的优势最大化。</p>
<a id="more"></a>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pair</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Pair</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer index;<br><br>    <span class="hljs-keyword">private</span> Integer value;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getIndex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIndex</span><span class="hljs-params">(Integer index)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.index = index;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getValue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setValue</span><span class="hljs-params">(Integer value)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Pair o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getValue() - o.getValue();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Pair <span class="hljs-title">of</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        Pair pair = <span class="hljs-keyword">new</span> Pair();<br>        pair.setIndex(index);<br>        pair.setValue(value);<br>        <span class="hljs-keyword">return</span> pair;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] advantageCount(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span>[] nums2) &#123;<br>        <span class="hljs-keyword">int</span> len = nums1.length;<br>        PriorityQueue&lt;Pair&gt; queue = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;((p1, p2) -&gt; p2.compareTo(p1));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            queue.add(Pair.of(i, nums2[i]));<br>        &#125;<br><br>        <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[len];<br><br>        Arrays.sort(nums1);<br>        <span class="hljs-keyword">int</span> idx1Start = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> idx1End = len - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            Pair maxPair = queue.poll();<br>            <span class="hljs-keyword">if</span> (maxPair.getValue() &lt; nums1[idx1End]) &#123;<br>                res[maxPair.getIndex()] = nums1[idx1End];<br>                idx1End--;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                res[maxPair.getIndex()] = nums1[idx1Start];<br>                idx1Start++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>优势洗牌</tag>
        <tag>田忌赛马</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-875 爱吃香蕉的珂珂</title>
    <url>/2021/08/27/leetcode-875/</url>
    <content><![CDATA[<p>题目描述：珂珂喜欢吃香蕉。这里有 N 堆香蕉，第 i 堆中有 piles[i] 根香蕉。警卫已经离开了，将在 H 小时后回来。</p>
<p>珂珂可以决定她吃香蕉的速度 K （单位：根&#x2F;小时）。每个小时，她将会选择一堆香蕉，从中吃掉 K 根。如果这堆香蕉少于 K 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。  </p>
<p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p>
<p>返回她可以在 H 小时内吃掉所有香蕉的最小速度 K（K 为整数）。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minEatingSpeed</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] piles, <span class="hljs-keyword">int</span> h)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = piles.length;<br>        <span class="hljs-keyword">int</span> maxSpeed = Integer.MIN_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">if</span> (piles[i] &gt; maxSpeed) &#123;<br>                maxSpeed = piles[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">int</span> left = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> right = maxSpeed + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-keyword">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> hour = calculateHour(piles, mid);<br>            <span class="hljs-keyword">if</span> (hour == h) &#123;<br>                right = mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hour &lt; h) &#123;<br>                right = mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (hour &gt; h) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculateHour</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] piles, <span class="hljs-keyword">int</span> speed)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> hours = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; piles.length; i++) &#123;<br>            hours += (piles[i] / speed + (piles[i] % speed != <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>));<br>        &#125;<br>        <span class="hljs-keyword">return</span> hours;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>二分查找</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-876 链表的中间结点</title>
    <url>/2021/09/01/leetcode-876/</url>
    <content><![CDATA[<p>题目描述：给定一个头结点为 <code>head</code> 的非空单链表，返回链表的中间结点。</p>
<p>如果有两个中间结点，则返回第二个中间结点。</p>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">middleNode</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        ListNode fastNode = head;<br>        ListNode slowNode = head;<br>        <span class="hljs-keyword">while</span> (fastNode != <span class="hljs-keyword">null</span> &amp;&amp; fastNode.next != <span class="hljs-keyword">null</span>) &#123;<br>            fastNode = fastNode.next.next;<br>            slowNode = slowNode.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slowNode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>oj</tag>
        <tag>难度简单</tag>
        <tag>链表</tag>
        <tag>中位数</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-895 最大频率栈</title>
    <url>/2021/08/21/leetcode-895/</url>
    <content><![CDATA[<p>题目描述：实现 FreqStack，模拟类似栈的数据结构的操作的一个类。</p>
<p>FreqStack 有两个函数：</p>
<ul>
<li>push(int x)，将整数 x 推入栈中。</li>
<li>pop()，它移除并返回栈中出现最频繁的元素。<br>如果最频繁的元素不只一个，则移除并返回最接近栈顶的元素。</li>
</ul>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>&#96;&#96;&#96;java<br>class FreqStack {<br>    &#x2F;&#x2F; 记录 FreqStack 中元素的最大频率<br>    private int maxFreq &#x3D; 0;<br>    &#x2F;&#x2F; 记录 FreqStack 中每个 val 对应的出现频率，后文就称为 VF 表<br>    private HashMap&lt;Integer, Integer&gt; valToFreq &#x3D; new HashMap&lt;&gt;();<br>    &#x2F;&#x2F; 记录频率 freq 对应的 val 列表，后文就称为 FV 表<br>    private HashMap&lt;Integer, Stack<Integer>&gt; freqToVals &#x3D; new HashMap&lt;&gt;();</p>
<pre><code>public FreqStack() &#123;
&#125;

public void push(int val) &#123;
    //1. 计算每个元素出现的频率
    int frequency = this.valToFreq.getOrDefault(val, 0);
    frequency++;
    this.valToFreq.put(val, frequency);

    //2. 计算最大频率
    maxFreq = maxFreq &gt;= frequency ? maxFreq : frequency;

    //3. 计算频率对应元素栈
    Stack&lt;Integer&gt; valStack = this.freqToVals.getOrDefault(frequency, new Stack&lt;&gt;());
    valStack.add(val);
    this.freqToVals.put(frequency, valStack);
&#125;

public int pop() &#123;
    //1. 取出弹出元素
    int val = this.freqToVals.get(maxFreq).pop();

    //2. 重新计算当前元素频率
    int frequency = this.valToFreq.get(val);
    frequency--;
    this.valToFreq.put(val, frequency);

    //3. 当前频率已经没有元素了，需要重新计算最大频率
    if (this.freqToVals.get(maxFreq).isEmpty()) &#123;
        maxFreq = frequency;
    &#125;
    return val;
&#125;
</code></pre>
<p>}<br>&#96;&#96;&#96;</p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度困难</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 92 反转链表 II</title>
    <url>/2021/03/28/leetcode-92/</url>
    <content><![CDATA[<p>题目描述：给你单链表的头指针 head 和两个整数 left 和 right ，其中 left &lt;&#x3D; right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。</p>
<a id="more"></a>



<h2 id="原题介绍"><a href="#原题介绍" class="headerlink" title="原题介绍"></a>原题介绍</h2><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><div><div class="graphviz">digraph leetcode_92_1 {
    
<pre><code>bgcolor=&quot;#f7f7f7&quot;

rankdir=LR
subgraph cluster_name &#123;
    
    subgraph cluster_1 &#123;
        n0 [label=&quot;1&quot; shape=circle,color=blue,fillcolor=white,style=filled]
        n1 [label=&quot;2&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled]
        n2 [label=&quot;3&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled]
        n3 [label=&quot;4&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled]
        n4 [label=&quot;5&quot; shape=circle,color=blue,fillcolor=white,style=filled]
        rank=same;
        n0 -&gt; n1 -&gt; n2 -&gt; n3 -&gt; n4 
        style=invis
    &#125;

    subgraph cluster_2 &#123;
        r0 [label=&quot;1&quot; shape=circle,color=blue,fillcolor=white,style=filled]
        r1 [label=&quot;4&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled]
        r2 [label=&quot;3&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled]
        r3 [label=&quot;2&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled]
        r4 [label=&quot;5&quot; shape=circle,color=blue,fillcolor=white,style=filled]

        rank=same;
        r0 -&gt; r1 -&gt; r2 -&gt; r3 -&gt; r4 
        style=invis
    &#125;    

    n2 -&gt; r2[constraint=false,color=&quot;red&quot;,pad=30]    

&#125;

label=&lt;&lt;B&gt;图 1.1 算法示意图&lt;/B&gt;&gt;
</code></pre>
<p>}</div></div></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">输入：head</span> <span class="hljs-string">=</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<span class="hljs-string">,</span> <span class="hljs-string">left</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span><span class="hljs-string">,</span> <span class="hljs-string">right</span> <span class="hljs-string">=</span> <span class="hljs-number">4</span><br><span class="hljs-string">输出：[1,4,3,2,5]</span><br></code></pre></td></tr></table></figure>



<h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">输入：head</span> <span class="hljs-string">=</span> [<span class="hljs-number">5</span>]<span class="hljs-string">,</span> <span class="hljs-string">left</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><span class="hljs-string">,</span> <span class="hljs-string">right</span> <span class="hljs-string">=</span> <span class="hljs-number">1</span><br><span class="hljs-string">输出：[5]</span><br></code></pre></td></tr></table></figure>



<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="遍历拆分链表"><a href="#遍历拆分链表" class="headerlink" title="遍历拆分链表"></a>遍历拆分链表</h3><p>如下图所示，通过遍历以 <code>[left，right]</code>作为分界，把链表分为三个字表。</p>
<div><div class="graphviz">digraph leetcode_92_1 {
    
<pre><code>bgcolor=&quot;#f7f7f7&quot;

rankdir=LR
subgraph cluster_name &#123;
    subgraph cluster_1 &#123;
        n0 [label=&quot;1&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n1 [label=&quot;...&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n2 [label=&quot;left-1&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n3 [label=&quot;left&quot; shape=circle,color=red,fillcolor=lightblue,style=filled,width=0.8,fixedsize=true]
        n4 [label=&quot;...&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled,width=0.8,fixedsize=true]
        n5 [label=&quot;right&quot; shape=circle,color=red,fillcolor=lightblue,style=filled,width=0.8,fixedsize=true]
        n6 [label=&quot;right+1&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n7 [label=&quot;...&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n8 [label=&quot;n&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        rank=same;
        n0 -&gt; n1 -&gt; n2
        n2 -&gt; n3[style=dashed,color=red]
        n3 -&gt; n4 -&gt; n5
        n5 -&gt; n6[style=dashed,color=red]
        n6 -&gt; n7 -&gt; n8
        style=invis
    &#125;

&#125;
label=&lt;&lt;B&gt;图 2.1 遍历拆分链表&lt;/B&gt;&gt;
</code></pre>
<p>}</div></div></p>
<h3 id="分别处理三个子表"><a href="#分别处理三个子表" class="headerlink" title="分别处理三个子表"></a>分别处理三个子表</h3><blockquote>
<ul>
<li>记录左边链表的head与end，记录右边链表的head。</li>
<li>遍历中间链表存入到栈当中，然后依次弹出栈中节点并链接为一个新的链表，根据栈后进先出的特性，新链表必定顺序是反过来的。</li>
<li>然后再依次按照左中右顺序拼接合并三个链表，得到最终结果。</li>
</ul>
</blockquote>
<div><div class="graphviz">digraph leetcode_92_1 {
    
<pre><code>bgcolor=&quot;#f7f7f7&quot;

rankdir=LR
subgraph cluster_name &#123;
    subgraph cluster_1 &#123;
        n0 [label=&quot;1&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n1 [label=&quot;...&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n2 [label=&quot;left-1&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n3 [label=&quot;right&quot; shape=circle,color=red,fillcolor=lightblue,style=filled,width=0.8,fixedsize=true]
        n4 [label=&quot;...&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled,width=0.8,fixedsize=true]
        n5 [label=&quot;left&quot; shape=circle,color=red,fillcolor=lightblue,style=filled,width=0.8,fixedsize=true]
        n6 [label=&quot;right+1&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n7 [label=&quot;...&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n8 [label=&quot;n&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        rank=same;
        n0 -&gt; n1 -&gt; n2
        n2 -&gt; n3[style=dashed,color=red]
        n3 -&gt; n4 -&gt; n5
        n5 -&gt; n6[style=dashed,color=red]
        n6 -&gt; n7 -&gt; n8
        style=invis
    &#125;

&#125;
label=&lt;&lt;B&gt;图 2.2 最终结果&lt;/B&gt;&gt;
</code></pre>
<p>}</div></div></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="栈实现"><a href="#栈实现" class="headerlink" title="栈实现"></a>栈实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 如果链表为空或者是单节点链表直接返回即可</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 初始化节点栈</span><br>        Stack&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;ListNode&gt;();<br><br>        <span class="hljs-comment">//3. 初始化左链表的end节点</span><br>        ListNode leftLinkedListEnd = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">//4. 初始化右链表的start节点</span><br>        ListNode rightLinkedListStart = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">//5. 定义链表索引，并初始化为1</span><br>        <span class="hljs-keyword">int</span> idx = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//6. 循环遍历链表</span><br>        <span class="hljs-keyword">for</span> (ListNode it = head; it != <span class="hljs-keyword">null</span>; it = it.next,idx++)&#123;<br>            <span class="hljs-comment">//6.1 如果是处于[left,right]之间的节点，则存入栈中</span><br>            <span class="hljs-keyword">if</span> ( idx &gt;= left &amp;&amp; idx &lt;= right)&#123;<br>                stack.push(it);<br>            &#125;<br>            <span class="hljs-comment">//6.2 如果是处于[1,left)之间的节点，则记录其end节点</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (idx &lt; left)&#123;<br>                leftLinkedListEnd = it;<br>            &#125;<br>            <span class="hljs-comment">//6.3 如果是处于(right,n]之间的节点，则记录其start节点，并跳出循环结束遍历</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                rightLinkedListStart = it;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//7. 依次弹出栈中元素反转中间链表</span><br>        ListNode midLinkedListHead = <span class="hljs-keyword">null</span>;<br>        ListNode midLinkedListEnd = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span> (!stack.empty())&#123;<br>            <span class="hljs-keyword">if</span> (midLinkedListHead == <span class="hljs-keyword">null</span>) &#123;<br>                midLinkedListHead = stack.pop();<br>                midLinkedListEnd = midLinkedListHead;<br>                midLinkedListEnd.next = <span class="hljs-keyword">null</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                midLinkedListEnd.next = stack.pop();<br>                midLinkedListEnd = midLinkedListEnd.next;<br>                midLinkedListEnd.next = <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//8. 合并左链表</span><br>        <span class="hljs-keyword">if</span> (leftLinkedListEnd != <span class="hljs-keyword">null</span>)&#123;<br>            leftLinkedListEnd.next = midLinkedListHead;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            head = midLinkedListHead;<br>        &#125;<br><br>        <span class="hljs-comment">//9. 合并右链表</span><br>        <span class="hljs-keyword">if</span> (rightLinkedListStart != <span class="hljs-keyword">null</span>)&#123;<br>            midLinkedListEnd.next = rightLinkedListStart;<br>        &#125;<br><br>        <span class="hljs-comment">//10. 返回最终链表head节点</span><br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-comment">//1. 临时节点</span><br>    <span class="hljs-keyword">private</span> ListNode node;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-comment">//2. 判空处理</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-comment">//3. 递归处理</span><br>        <span class="hljs-keyword">return</span> reverse(head, left, right);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * reverse 前n个元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> head 表头</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> n    前n个元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 新表节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-comment">//1. n==1表示一个元素直接返回，并记录后区节点</span><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">this</span>.node = head.next;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 递归得到head.next后面的反转</span><br>        ListNode end = reverse(head.next, n - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//3. 反转 head 和 end</span><br>        head.next.next = head;<br><br>        <span class="hljs-comment">//4. 新的尾节点指向保存的后驱节点</span><br>        head.next = <span class="hljs-keyword">this</span>.node;<br>        <span class="hljs-keyword">return</span> end;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * reverse 中间n个元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> head  表头</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left  左边界</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right 有边界</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 新表节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 如果left == 1 递归反转前n个元素</span><br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> reverse(head, right);<br>        &#125;<br><br>        <span class="hljs-comment">//2. 递归找到待反转起始位置</span><br>        head.next = reverse(head.next, left - <span class="hljs-number">1</span>, right - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>






<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/" title="原题地址">原题地址</a></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>单链表</tag>
        <tag>反转</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-95 不同的二叉搜索树 II</title>
    <url>/2021/08/08/leetcode-95/</url>
    <content><![CDATA[<p>题目描述：给你一个整数 <code>n</code> ，请你生成并返回所有由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的不同 <strong>二叉搜索树</strong> 。可以按 <strong>任意顺序</strong> 返回答案。</p>
<ul>
<li><code>1 &lt;= n &lt;= 8</code></li>
</ul>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;TreeNode&gt; <span class="hljs-title">generateTrees</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">return</span> generateTrees(<span class="hljs-number">1</span>, n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;TreeNode&gt; <span class="hljs-title">generateTrees</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>        List&lt;TreeNode&gt; root = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (end &gt; start) &#123;<br>            root.add(<span class="hljs-keyword">null</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> idx = start; idx &lt;= end; idx++) &#123;<br>            List&lt;TreeNode&gt; leftTree = generateTrees(start, idx - <span class="hljs-number">1</span>);<br>            List&lt;TreeNode&gt; rightTree = generateTrees(idx + <span class="hljs-number">1</span>, end);<br>            <span class="hljs-keyword">for</span> (TreeNode leftNode : leftTree) &#123;<br>                <span class="hljs-keyword">for</span> (TreeNode rightNode : rightTree) &#123;<br>                    TreeNode rootNode = <span class="hljs-keyword">new</span> TreeNode(idx);<br>                    rootNode.left = leftNode;<br>                    rootNode.right = rightNode;<br>                    root.add(rootNode);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-96 不同的二叉搜索树</title>
    <url>/2021/08/07/leetcode-96/</url>
    <content><![CDATA[<p>题目描述：给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数。</p>
<ul>
<li><code>1 &lt;= n &lt;= 19</code></li>
</ul>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numTrees</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> numTrees(<span class="hljs-number">1</span>, n);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numTrees</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (end &lt;= start) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> idx = start; idx &lt;= end; idx++) &#123;<br>            <span class="hljs-keyword">int</span> leftTreeStart = start;<br>            <span class="hljs-keyword">int</span> leftTreeEnd = idx - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> rightTreeStart = idx + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> rightTreeEnd = end;<br>            <span class="hljs-keyword">int</span> leftNum = (leftTreeEnd - leftTreeStart &lt; <span class="hljs-number">1</span>) ? <span class="hljs-number">1</span> : numTrees(leftTreeStart, leftTreeEnd);<br>            <span class="hljs-keyword">int</span> rightNum = (rightTreeEnd - rightTreeStart &lt; <span class="hljs-number">1</span>) ? <span class="hljs-number">1</span> : numTrees(rightTreeStart, rightTreeEnd);<br>            sum += leftNum * rightNum;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树搜索树</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-98 验证二叉搜索树</title>
    <url>/2021/08/13/leetcode-98/</url>
    <content><![CDATA[<p>题目描述：给定一个二叉树，判断其是否是一个有效的二叉搜索树。假设一个二叉搜索树具有如下特征：</p>
<ul>
<li>节点的左子树只包含小于当前节点的数。</li>
<li>节点的右子树只包含大于当前节点的数。</li>
<li>所有左子树和右子树自身必须也是二叉搜索树。</li>
</ul>
<a id="more"></a>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> isValidBST(root, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root, TreeNode min, TreeNode max)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Boolean.TRUE;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (min != <span class="hljs-keyword">null</span> &amp;&amp; root.val &lt;= min.val) &#123;<br>            <span class="hljs-keyword">return</span> Boolean.FALSE;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (max != <span class="hljs-keyword">null</span> &amp;&amp; root.val &gt;= max.val) &#123;<br>            <span class="hljs-keyword">return</span> Boolean.FALSE;<br>        &#125;<br>        <span class="hljs-keyword">return</span> isValidBST(root.left, min, root) &amp;&amp; isValidBST(root.right, root, max);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>leetcode</tag>
        <tag>难度中等</tag>
        <tag>oj</tag>
        <tag>二叉树搜索树</tag>
        <tag>验证</tag>
      </tags>
  </entry>
  <entry>
    <title>反转单链表的前n个元素</title>
    <url>/2021/04/01/reverse-linked-list-top-n/</url>
    <content><![CDATA[<p>反转单链表的前n个元素与反转单链表是类似的问题，同理其也会有三种方法去解决。可以增加一个栈来解决，这样相当于只对前n个元素进行压栈处理，同理也可以用遍历的方法解决，由于能用栈解决同样也就可以使用递归的方式解决。</p>
<a id="more"></a>

<h2 id="栈实现"><a href="#栈实现" class="headerlink" title="栈实现"></a>栈实现</h2><h2 id="遍历实现"><a href="#遍历实现" class="headerlink" title="遍历实现"></a>遍历实现</h2><h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2>]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>难度中等</tag>
        <tag>单链表</tag>
        <tag>反转</tag>
      </tags>
  </entry>
  <entry>
    <title>反转链表</title>
    <url>/2021/03/30/reverse-linked-list/</url>
    <content><![CDATA[<p>单链表的反转，我们能想到反转顺序最简单的数据结构就是栈了，如果可以用栈的话，那问题就简单了。顺序遍历单链表，依次入栈直到遍历结束，然后依次出栈重新有前到后连接为一个新的单链表，则自动实现了反转功能。</p>
<a id="more"></a>

<h2 id="栈实现"><a href="#栈实现" class="headerlink" title="栈实现"></a>栈实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空处理</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 遍历链表入栈</span><br>        Stack&lt;ListNode&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;ListNode&gt;();<br>        ListNode node = head;<br>        <span class="hljs-keyword">while</span> (node != <span class="hljs-keyword">null</span>)&#123;<br>            stack.push(node);<br>            node = node.next;<br>        &#125;<br><br>        <span class="hljs-comment">//3. 出栈重新建立链表</span><br>        ListNode newHead = <span class="hljs-keyword">null</span>;<br>        ListNode newEnd = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty())&#123;<br>            node = stack.pop();<br>            <span class="hljs-keyword">if</span> (newHead == <span class="hljs-keyword">null</span>)&#123;<br>                newHead = node;<br>                newEnd = newHead;<br>                newHead.next = <span class="hljs-keyword">null</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                newEnd.next = node;<br>                newEnd = newEnd.next;<br>                newEnd.next = <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="遍历实现"><a href="#遍历实现" class="headerlink" title="遍历实现"></a>遍历实现</h2><h3 id="原理详解"><a href="#原理详解" class="headerlink" title="原理详解"></a>原理详解</h3><div><div class="graphviz">digraph leetcode_92_1 {
    
<pre><code>bgcolor=&quot;#f7f7f7&quot;

rankdir=LR
subgraph cluster_name &#123;
    subgraph cluster_1 &#123;
        n0 [label=&quot;newEnd&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n1 [label=&quot;...&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n2 [label=&quot;newHead&quot; shape=circle,color=blue,fillcolor=white,style=filled,width=0.8,fixedsize=true]
        n3 [label=&quot;node&quot; shape=circle,color=red,style=dashed,width=0.8,fixedsize=true]
        n4 [label=&quot;oldHead&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled,width=0.8,fixedsize=true]
        n5 [label=&quot;...&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled,width=0.8,fixedsize=true]
        n6 [label=&quot;oldEnd&quot; shape=circle,color=blue,fillcolor=lightblue,style=filled,width=0.8,fixedsize=true]
        
        rank=same;
        n0 -&gt; n1 -&gt; n2[dir=back]
        n2 -&gt; n3[style=dashed,color=&quot;#f7f7f7&quot;]
        n3 -&gt; n4[style=dashed,color=red]
        n4 -&gt; n5 -&gt; n6
        style=invis
    &#125;

&#125;
label=&lt;&lt;B&gt;图 1.1 遍历反转链表&lt;/B&gt;&gt;
</code></pre>
<p>}</div></div></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空处理</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 设置反转后新链表表头节点</span><br>        ListNode newLinkedListHead = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">//3. 设置反转前旧链表表头节点</span><br>        ListNode oldLinkedListHead = head;<br><br>        <span class="hljs-comment">//4. 设置临时节点</span><br>        ListNode tmpNode = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">//5. 遍历旧链表</span><br>        <span class="hljs-keyword">while</span> (oldLinkedListHead != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">//5.1 取出当前节点到临时节点</span><br>            tmpNode = oldLinkedListHead;<br><br>            <span class="hljs-comment">//5.2 重新设置旧链表表头</span><br>            oldLinkedListHead = oldLinkedListHead.next;<br><br>            <span class="hljs-comment">//5.3 把取出的临时节点添加到反转后新链表的表头</span><br>            <span class="hljs-keyword">if</span> (newLinkedListHead == <span class="hljs-keyword">null</span>)&#123;<br>                newLinkedListHead = tmpNode;<br>                newLinkedListHead.next = <span class="hljs-keyword">null</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                tmpNode.next = newLinkedListHead;<br>                newLinkedListHead = tmpNode;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//6. 返回反转后新链表</span><br>        <span class="hljs-keyword">return</span> newLinkedListHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><p>递归实现的原理和栈是类似的，因为递归本身就是利用了程序栈进行了压栈处理，因此好好理解一下第一种算法与第三种算法，有助于理解递归的原理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>        <span class="hljs-comment">//1. 判空处理</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br><br>        <span class="hljs-comment">//2. 获取递归得到的新表头</span><br>        ListNode newHead = reverse(head.next);<br><br>        <span class="hljs-comment">//3. 处理当前节点</span><br>        head.next.next = head;<br><br>        <span class="hljs-comment">//4. 处理完之后新的尾节点置空</span><br>        head.next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">//4. 返回新的表头节点</span><br>        <span class="hljs-keyword">return</span> newHead;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>难度中等</tag>
        <tag>单链表</tag>
        <tag>反转</tag>
      </tags>
  </entry>
  <entry>
    <title>四川省省属事业单位公开招聘工作人员《综合知识》笔试复习大纲</title>
    <url>/2022/02/13/%E5%9B%9B%E5%B7%9D%E7%9C%81%E7%9C%81%E5%B1%9E%E4%BA%8B%E4%B8%9A%E5%8D%95%E4%BD%8D%E5%85%AC%E5%BC%80%E6%8B%9B%E8%81%98%E5%B7%A5%E4%BD%9C%E4%BA%BA%E5%91%98%E3%80%8A%E7%BB%BC%E5%90%88%E7%9F%A5%E8%AF%86%E3%80%8B%E7%AC%94%E8%AF%95%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<p>四川省省属事业单位公开招聘工作人员《综合知识》笔试复习大纲</p>
<a id="more"></a>

<h2 id="大纲内容"><a href="#大纲内容" class="headerlink" title="大纲内容"></a>大纲内容</h2><p>​                                                                    <strong>关于修订发布省属事业单位公共科目考试大纲的公告</strong></p>
<p>​        为适应新形势新情况，我厅对现行省政府序列事业单位公开招聘工作人员公共科目考试大纲进行了修订。现将修订后的公共科目考试大纲——<strong>《四川省省属事业单位公开招聘工作人员〈综合知识〉笔试复习大纲》</strong>予以公告。请报考省政府序列事业单位的<strong>非中小学教师岗位</strong>、<strong>非卫生事业单位卫生专业技术人员岗位</strong>考生按此大纲准备《综合知识》笔试。</p>
<p>​        原四川省人事厅2009年11月12日发布的《四川省省属事业单位公开招聘工作人员〈综合知识〉考试复习大纲》自本公告发布之日起废止。</p>
<p>​        <strong>特别提示：我厅不举办也不委托任何机构举办事业单位公招考试辅导培训班。目前社会上以各种名义举办的辅导(培训)班、辅导(培训)网站均与本厅无关。敬请广大报考者警惕，切勿上当受骗。</strong></p>
<p>​                                                                                                                                                                                    四川省人力资源和社会保障厅</p>
<p>​                                                                                                                                                                                                            2014年9月28日</p>
<p>​                                                                                    <strong>四川省省属事业单位公开招聘工作人员</strong></p>
<p>​                                                                                            <strong>《综合知识》笔试复习大纲</strong></p>
<p>​        本大纲供参加四川省省属事业单位公开招聘非中小学教师岗位、非卫生事业单位卫生专业技术岗位工作人员公共科目考试——《综合知识》笔试的考生复习参考。请考生重点掌握以下知识内容。</p>
<p>​        《综合知识》笔试的题型包括判断题、单项选择题、多项选择题、判断简析题和案例分析(含阅读分析)题五类。</p>
<p>​        <strong>第一部分法律</strong></p>
<p>​        <strong>一、宪法</strong></p>
<p>​        (一)宪法的概念、特征、本质、作用和宪法监督</p>
<p>​        (二)我国的国体和政体，我国的统一战线和政治协商制度(会议)，国家的标志和国家的结构形式，我国的人民代表大会制度及民族区域自治制度和特别行政区制度</p>
<p>​        (三)我国的基本经济制度</p>
<p>​        (四)公民的基本权利与义务基本概念，我国公民的基本权利和自由，我国公民的基本义务，我国公民行使权利的基本原则等</p>
<p>​        (五)我国的国家机关性质、地位、产生、任期、职权等</p>
<p>​        <strong>二、民法</strong></p>
<p>​        (一)民法的概念、基本原则和调整范围</p>
<p>​        (二)民事法律关系的主体</p>
<p>​        (三)民事法律行为的概念、特征、分类、有效要件，无效的民事行为，可变更、可撤销的民事行为和效力未定的民事行为，代理的概念、特征、种类及代理权的行使，无权代理，表见代理</p>
<p>​        (四)物权与所有权的概念、特征和分类，所有权的内容，共有，建筑物区分所有权，善意取得，用益物权和担保物权</p>
<p>​        (五)债的概念、特征及分类，债发生的原因，债的履行和终止，合同的概念、特征，合同的订立，格式合同，合同的效力，违约责任，缔约过失责任以及合同的担保</p>
<p>​        (六)知识产权的概念、内容和特征，著作权的概念、内容及保护，专利权的概念、客体、内容，专利申请原则及期限，商标权的概念、特征、取得、期限和保护</p>
<p>​        (七)人身权的概念、分类和保护方法</p>
<p>​        (八)财产继承权的概念与特征，我国继承制度的基本原则，继承权的取得、丧失和保护，法定继承与遗嘱继承，遗产的处理</p>
<p>​        (九)民事责任的概念、特征，一般侵权责任的构成要件，民事责任的归责原则和民事责任方式，不承担民事责任和减轻责任的情形(不可抗力、正当防卫、紧急避险)，关于责任主体的特殊规定，特殊侵权责任</p>
<p>​        (十)诉讼时效的概念、种类、中止与中断</p>
<p>​        (十一)民事诉讼法的基本概念，民事审判的基本制度，民事案件的管辖，诉讼参加人，民事诉讼证据，法院调解，第一审普通程序相关规定，第二审程序相关规定，审判监督程序</p>
<p>​        <strong>三、刑法</strong></p>
<p>​        (一)犯罪的概念、特征和犯罪构成</p>
<p>​        (二)正当防卫和紧急避险</p>
<p>​        (三)单位犯罪的概念和刑罚</p>
<p>​        (四)刑罚的种类</p>
<p>​        (五)犯罪的种类及贪污罪、挪用公款罪、受贿罪、行贿罪、职务侵占罪、敲诈勒索罪、交通肇事罪、危害公共安全罪</p>
<p>​        <strong>四、劳动法</strong></p>
<p>​        (一)劳动法的概念、调整对象、基本原则、适用范围及劳动者的权利和义务</p>
<p>​        (二)国家和地方各级人民政府促进就业的职责，平等的就业权利和就业的特别规定</p>
<p>​        (三)劳动者的工作时间、休息休假、工资，劳动安全卫生，女职工和未成年工劳动保护，职业培训，社会保险和福利等法定劳动管理保护制度</p>
<p>​        (四)劳动争议的范围、处理原则和方式</p>
<p>​        <strong>五、劳动合同法</strong></p>
<p>​        (一)劳动合同的概念、特征，劳动合同法概述</p>
<p>​        (二)劳动合同的订立原则，订立劳动合同的基本规定，劳动合同的种类、试用期和条款 </p>
<p>​        (三)劳动合同的无效 </p>
<p>​        (四)劳动合同的履行、变更、解除和终止 </p>
<p>​        (五)集体合同、竞业限制、劳务派遣等特别规定</p>
<p>​         (六)事业单位的聘用合同与劳动合同的关系</p>
<p>​        <strong>六、道路交通安全法</strong></p>
<p>​        (一)道交法的立法目的和适用对象</p>
<p>​        (二)车辆和驾驶人(机动车登记制度、机动车安全技术检验、特殊机动车的管理、禁止性行为、非机动车的管理，机动车驾驶人的驾驶证管理、驾驶要求)</p>
<p>​        (三)道路通行条件</p>
<p>​        (四)道路通行规定，机动车、非机动车通行规定，行人和乘车人通行规定，高速公路的特别规定</p>
<p>​        (五)交通事故处理方法，交通事故认定书，交通事故争议的解决，交通事故损害赔付</p>
<p>​        <strong>七、治安管理处罚法</strong></p>
<p>​        (一)治安管理处罚法的概念、基本原则和调整范围</p>
<p>​        (二)治安管理处罚的种类和具体适用</p>
<p>​        (三)扰乱公共秩序、妨害公共安全、侵犯人身权利和财产权利、妨害社会管理等违反治安管理的行为和处罚</p>
<p>​        <strong>第二部分 公民道德建设</strong></p>
<p>​        <strong>一、公民道德建设概述</strong></p>
<p>​        (一)公民道德建设的重要性、紧迫性和长期性</p>
<p>​        (二)公民道德的指导思想和方针、原则</p>
<p>​        (三)公民道德建设的主要内容</p>
<p>​        <strong>二、社会主义公民道德建设规范</strong></p>
<p>​        (一)公民基本道德规范</p>
<p>​        (二)社会公德规范</p>
<p>​        (三)职业道德规范</p>
<p>​        (四)家庭美德规范</p>
<p>​        <strong>第三部分 国情省情</strong></p>
<p>​        <strong>一、国情知识</strong></p>
<p>​        (一)国土与资源概况</p>
<p>​        (二)人口与民族概况、主要民族政策和宗教信仰政策</p>
<p>​        (三)综合国力 经济实力、科技实力、军事实力、软实力</p>
<p>​        (四)阶段特征 社会主义初级阶段的科学含义、我国社会主义初级阶段理论基本内容、建设有中国特色社会主义</p>
<p>​        (五)外交政策</p>
<p>​        <strong>二、省情知识</strong></p>
<p>​        (一)四川社会历史简况 行政区划、人口与民族分布概况，悠久的历史与古蜀文明，主要历史文化与近代上的主要历史事件，科技教育优势与杰出人才</p>
<p>​        (二)四川自然地理概况 地理位置，地形地貌与气候，土地、植物、动物、水利与矿产资源，“天府之国”与长江上游生态屏障，大熊猫故乡，四川的世界自然文化遗产和国家重点风景名胜区，四川战胜了两次特大地震灾害</p>
<p>​        (三)经济发展和人民生活 综合实力、区域经济、民营经济和人民生活概况</p>
<p>​        <strong>第四部分公文写作</strong></p>
<p>​        <strong>一、公文的含义、种类和作用</strong></p>
<p>​        (一)公文的主要分类方法及分类</p>
<p>​        (二)通用公文的类型、用途及特点</p>
<p>​        (三)公文文种的涵义、作用、文种选择的依据，正确区分、选择和使用文种</p>
<p>​        (四)公文的主要作用</p>
<p>​        <strong>二、公文的格式规范</strong></p>
<p>​        (一)公文文面格式的类型，特点和作用</p>
<p>​        (二)公文的组成部分(要素)、排列顺序、标识规则与特定格式</p>
<p>​        <strong>三、公文的撰写</strong></p>
<p>​        (一)公文撰写的基本要求与撰写一篇公文的具体要求</p>
<p>​        (二)通告、通知、通报、报告、请示、批复、函、会议纪要等常用公文的特点、用途、分类以及结构、写作技巧等知识</p>
<p>​        (三)调查报告、简报、公务信息、总结等信息反馈文书的特点、作用、分类、基本结构和写作方法、撰写要求</p>
<p>​        (三)慰问信、表扬信、感谢信、祝贺信、邀请信(请柬)、聘请书、倡议书等日常事务文书的基本结构及写法</p>
<p>​        (四)启事、声明、海报、公示等告启文书的用途、基本结构及写法</p>
<p>​        <strong>第五部分 事业单位基本常识</strong></p>
<p>​        <strong>一、事业单位概述</strong></p>
<p>​        事业单位的概念、内涵、作用</p>
<p>​        <strong>二、事业单位分类改革</strong></p>
<p>​        事业单位分类改革的意义、指导思想、基本原则、总体目标和事业单位类别划分</p>
<p>​        <strong>三、事业单位人事制度改革</strong></p>
<p>​        (一)《事业单位人事管理条例》的内容及基本规定</p>
<p>​        (二)事业单位人事制度改革的指导思想、基本原则、目标任务和主要内容</p>
<p>​        (三)事业单位聘用制度、岗位管理制度、公开招聘制度、竞聘上岗制度、考核奖惩制度</p>
<p>​        <strong>四、事业单位公开招聘制度</strong></p>
<p>​        (一)公开招聘的范围、基本原则、主要方式、基本程序</p>
<p>​        (二)应聘人员应具备的基本条件</p>
<p>​        (三)回避制度和违纪处理</p>
<p>​        <strong>五、事业单位聘用制度</strong></p>
<p>​        (一)聘用制度的基本原则和实施范围</p>
<p>​        (二)聘用合同的主要内容、类型和期限</p>
<p>​        (三)聘用合同的订立、变更、终止、解除和争议处理</p>
<p>​        (四)违反和终止、解除聘用合同的责任</p>
<p>​        <strong>六、事业单位岗位管理制度</strong></p>
<p>​        (一)岗位的概念、特点、类别和设置原则</p>
<p>​        (二)岗位设置管理的单位范围和人员范围</p>
<p>​        (三)可以申请设置特设岗位的情形</p>
<p>​        (四)管理岗位、专业技术岗位和工勤技能岗位的等级及内部结构比例</p>
<p>​        (五)管理岗位、专业技术岗位和工勤技能岗位的基本聘用条件</p>
<p>​        (六)聘用管理岗位的学历条件和年限规定?</p>
<p>​        (七)聘用专业技术岗位的基本条件</p>
<p>​        (八)聘用工勤技能岗位的基本条件</p>
<p>​        (九)岗位设置的基本程序和作用</p>
<p>​        (十)事业单位岗位设置方案变更</p>
<p>​        (十一)岗位聘用的基本要求和规定</p>
<p>​        <strong>七、事业单位人员考核制度</strong></p>
<p>​        (一)考核的原则、对象、种类、档次</p>
<p>​        (二)考核结果的使用</p>
<p>​        <strong>八、事业单位的奖励</strong></p>
<p>​        (一)奖励的原则、情形</p>
<p>​        (二)种类和对象范围</p>
<p>​        <strong>九、事业单位工作人员处分</strong></p>
<p>​        (一)给予处分的行为</p>
<p>​        (二)处分的原则、种类、权限、程序、期限和适用</p>
<p>​        (三)处分的解除及程序</p>
<p>​        <strong>十、人事争议处理</strong></p>
<p>​        (一)人事争议的概念和分类</p>
<p>​        (二)人事争议处理的渠道和基本原则</p>
<p>​        (三)人事争议协商、人事争议调解的概念及特点</p>
<p>​        (四)人事争议仲裁的特点、原则、依据、受案范围、申请条件和时效</p>
<p>​        (五)人事争议诉讼的概念、特点和依据</p>
<p>​        <strong>第六部分 经济、科技、文化常识</strong></p>
<p>​        <strong>一、经济常识</strong></p>
<p>​        (一)社会主义市场经济体制 经济体制与市场经济，社会主义市场经济</p>
<p>​        (二)微观经济常识 经济学的基础知识，市场机制与竞争，收入分配</p>
<p>​        (三)宏观经济常识 宏观经济学概述，宏观调控的目标和内容，宏观经济主要指标，宏观经济政策，扩大内需</p>
<p>​        <strong>二、科学技术及环保常识</strong></p>
<p>​        (一)科技概论 科学与技术，历史上的科学革命，历史上的技术革命，现代科技发展的趋势</p>
<p>​        (二)科学前沿 物质的构成，宇宙的起源，地球的起源，生命的起源，人类的起源， 人的智能，人工智能</p>
<p>​        (三)高新技术 计算机与通信技术，生物技术，能源技术，新材料技术，空间技术， 激光技术，海洋开发技术，水资源利用技术</p>
<p>​        (四)农业农村和农业科技 农业基础知识，社会主义新农村建设，现代农业发展趋势，现代农业技术革命，可持续农业，有机农业，生态农业，精细农业</p>
<p>​        (五)环境保护 生态系统与生态平衡 可持续发展(清洁生产、低碳经济、循环经济)，环境保护与人体健康，大气污染及其防治，水污染及其防治，土壤污染及其防治，物理性污染及其防治，固体废弃物及其处理</p>
<p>​        <strong>三、文化常识</strong></p>
<p>​        (一)社会主义文化建设 文化与文化建设，文化软实力与综合国力，和谐文化，文化体制改革，文化开放与文化安全，非物质文化遗产，社会主义道德建设，“二为”方向和“双百”方针，继承和弘扬中华优秀传统文化，国学经典“经史子集”。</p>
<p>​        (二)社会主义核心价值观和社会主义核心价值体系 社会主义核心价值体系和社会主义核心价值观提出的背景，社会主义核心价值体系的基本内容及其重要意义，社会主义核心价值观的基本内容，社会主义核心价值观与社会主义核心价值体系的关系，培育和践行社会主义核心价值观的重要意义，培育和践行社会主义核心价值观的指导思想和基本原则，如何培育和践行社会主义核心价值观</p>
<p>​        (三)文化事业与文化产业 公共文化服务体系，现代文化市场体系，现代传播体系，优秀传统文化传承体系，文化科技创新，文化产品与文化消费，城市文化，城乡文化一体化</p>
<p>​        <strong>第七部分 职业能力测试部分</strong></p>
<p>​        通过对应考者的常识与基本技能、言语理解与表达、判断推理、数量关系与资料分析的测试，考察应考者的应知应会能力、逻辑推理判断能力、语言理解与表达能力、数据判断与分析能力。</p>
<p>​        <strong>第八部分　时事知识部分</strong></p>
<p>​        通过对一年来国内国际时事知识及国策和四川省策的测试，了解应考者获取新知识与信息的能力。</p>
]]></content>
      <categories>
        <category>公务员</category>
      </categories>
      <tags>
        <tag>公务员</tag>
        <tag>事业单位</tag>
      </tags>
  </entry>
  <entry>
    <title>旅途的起点</title>
    <url>/2020/10/24/%E6%97%85%E9%80%94%E7%9A%84%E8%B5%B7%E7%82%B9/</url>
    <content><![CDATA[<p>今天刚把博客网站初步搭建好，从学生时代，到现在工作两年，一直以来都想好好写博客，写一些生活的感悟，以及技术上的文章。</p>
<a id="more"></a>


<h2 id="写博客背景"><a href="#写博客背景" class="headerlink" title="写博客背景"></a>写博客背景</h2><p>之前有在csdn上写博客的经历，但那是大学时候的事情了，后来也没有坚持下来。在快毕业的时候，同学买了一个博客视频，教你如何一步一步搭建自己的博客网站，那时候感觉搭建自己的网站挺新鲜的，然后尝试了之后，依然是半途而废。毕业之后，从事互联网工作，在国内某盛名996厂，不过有些名不符实，996没有，995到时不少。平时时间并不宽裕，因此也没有太多时间写博客。可能有人要问了，那为什么在工作两年之后，突然想到开始写博客了呢？原因之一是因为这一直以来是我自己非常想做的一件事情吧。事实证明，自己想了很久而没做的事情，即使过了很久，但是只要契机到了，你依然回去做。那么我这次开始写博客的契机又是什么呢？因为工作快二年半了，工作部门最近似乎也有些变动，有些不安吧。希望能在这大半年的时间里，好好整理一下所学习的知识，为可能的改变做准备吧。</p>
<h2 id="写博客的目的"><a href="#写博客的目的" class="headerlink" title="写博客的目的"></a>写博客的目的</h2><p>写博客主要为了记录生活的点滴，人生感悟以及作为一个技术宅的所学吧，算是对自己人生的一个整理吧。古有三十而立，想想我也是一个快而立之年的人了，总归要好好思考未来的人生道路该怎么走。平时工作忙的时候倒没觉得，但是一旦放假闲下来的时候，时常想一些奇奇怪怪的事情。人生想想还挺短暂的，也许未来还有四十年可活，也只有1万多天，如果每天能写一篇博客的话，余生还能写一万多篇博客。这未尝不是一件有趣的事情。人生嘛，说短不过几十载，说长嘛，还挺长的，总归要做一些有趣的事情，为单调重复的生活增添一些味道。博客能够帮助我们记录平凡的点滴，以及多彩的瞬间。此时正是英雄联盟S10之际，青春慢慢远去，我们的人生不能像英雄联盟一样可以随时重启，引用英雄联盟中的一句台词，我想对自己说，没有撤退可言。</p>
]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
  <entry>
    <title>成都市属事业单位《公共基础知识》考试大纲</title>
    <url>/2022/02/13/%E6%88%90%E9%83%BD%E5%B8%82%E5%B1%9E%E4%BA%8B%E4%B8%9A%E5%8D%95%E4%BD%8D%E3%80%8A%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<p>《公共基础知识》总分100分，考试时间90分钟，全部为客观性试题。题型为单项选择题、多项选择题和是非判断题三种。考试内容主要包括：法律基础、中国特色社会主义理论、马克思主义哲学、应用文写作、经济与管理、公民道德建设、科技基础知识、四川省情、成都市情、时事政治等。</p>
<a id="more"></a>

<h2 id="大纲内容"><a href="#大纲内容" class="headerlink" title="大纲内容"></a>大纲内容</h2><p>​        <strong>第一部分：法律基础。</strong></p>
<p>　　一、法的一般原理、法的制定与实施。</p>
<p>　　二、宪法性法律、行政法、民法、刑法、社会法、经济法等的基本概念和基本原则。</p>
<p>　　三、宪法性法律、行政法、民法、刑法、社会法、经济法等的法律关系、法律行为和适用范围等。</p>
<p>　　四、常见犯罪种类、特点与刑罚种类、裁量。</p>
<p>　　五、合同的订立、生效、履行、变更、终止和解除。</p>
<p>　　<strong>第二部分：中国特色社会主义理论。</strong></p>
<p>　　一、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观的主要内容。</p>
<p>　　二、党的十八大以来我国面临的新形势新任务，以及党的建设和国家未来发展的一系列理论和实践。</p>
<p>　　<strong>第三部分：马克思主义哲学。</strong></p>
<p>　　马克思主义哲学的主要内容及基本观点。</p>
<p>　　<strong>第四部分：应用文写作。</strong></p>
<p>　　一、 应用文含义、特点、种类、作用、格式规范。</p>
<p>　　二、 法定公文的分类、构成要素、写作要求以及常用公文的撰写。</p>
<p>　　三、 公文处理的概念、基本任务、基本原则，收文、发文处理的程序和方法，办毕公文的处置。</p>
<p>　　<strong>第五部分：经济与管理。</strong></p>
<p>　　一、经济学的基本常识、基础理论及运用。</p>
<p>　　二、管理学的基本常识、基础理论及运用。</p>
<p>　　<strong>第六部分：公民道德建设。</strong></p>
<p>　　一、公民道德建设的指导思想、方针原则及主要内容。</p>
<p>　　二、社会主义核心价值观的概念、内涵及基本原则。</p>
<p>　　<strong>第七部分：科技基础知识。</strong></p>
<p>　　信息科学、生物技术、能源科学、空间技术、农业高科技等新技术的基本特点、作用及发展趋势。</p>
<p>　　<strong>第八部分：省情市情。</strong></p>
<p>　　四川省和成都市的历史文化、人口与民族、区域经济、地理位置、地形地貌、气候特点。</p>
<p>　　<strong>第九部分：时事政治。</strong></p>
<p>　　一、一年来国际、国内发生的重大事件。</p>
<p>　　二、国家、四川省、成都市近期出台的重大决策的主要内容。</p>
<p>　　<strong>《医学基础知识》</strong></p>
<p>　　《医学基础知识》总分100分，考试时间90分钟，全部为客观性试题，题型为单项选择题、多项选择题和是非判断题三种。考查内容主要包括生物学、人体解剖学、生理学、药理学、病理学和诊断学六个部分。</p>
<p>　　<strong>第一部分：生物学。</strong></p>
<p>　　细胞和生命的遗传、变异以及遗传病发病机理。</p>
<p>　　<strong>第二部分：人体解剖学。</strong></p>
<p>　　运动系统、内脏学总论、消化系统、呼吸系统、泌尿系统、生殖系统、脉管系统、感觉器、神经系统和内分泌系统。</p>
<p>　　<strong>第三部分：生理学。</strong></p>
<p>　　细胞的基本功能、血液、血液循环、呼吸、消化和吸收、能量代谢和体温、尿的生成和排出、感觉器官、神经系统的功能、内分泌及生殖。</p>
<p>　　<strong>第四部分：药理学。</strong></p>
<p>　　药物效应动力学、药物代谢动力学以及常用国家基本药物的药理作用、临床应用、不良反应和禁忌症。</p>
<p>　　<strong>第五部分：病理学。</strong></p>
<p>　　疾病概述、血液循环障碍、炎症、肿瘤、心血管系统疾病、呼吸系统疾病、消化系统疾病、泌尿系统疾病、女性生殖系统及乳腺疾病、传染病和寄生虫病等疾病的概念、病因、发病机制、特征、类型、病理变化。</p>
<p>　　<strong>第六部分：诊断学。</strong></p>
<p>　　发热、疼痛、水肿、呼吸困难等多种常见症状的发生机制、临床表现、体征和鉴别。</p>
<p>　　<strong>《教育公共基础》</strong></p>
<p>　　《教育公共基础》总分100分，考试时间90分钟，全部为客观性试题。题型为单项选择题、多项选择题和是非判断题三种。考试内容主要包括教育学基础、教育心理学、教育法学和教师职业道德四个部分。</p>
<p>　　<strong>第一部分：教育学基础。</strong></p>
<p>　　教育与教育学、教育的功能、教育的目的、教师与学生、课程、课堂教学、学校德育、班级管理与班主任工作的基本理论。</p>
<p>　　<strong>第二部分：教育心理学。</strong></p>
<p>　　心理发展与教育、学习与学习理论、学习的迁移、记忆和遗忘、学习策略与不同类型的学习、影响学习的心理因素、个别差异与教育以及学生心理健康教育。</p>
<p>　　<strong>第三部分：教育法学。</strong></p>
<p>　　法与教育法、教育法律关系、教育法律规范、教育法制过程、教育法律责任、学生的权利及其维护、教师的权利及其维护以及教育法律救济。</p>
<p>　　<strong>第四部分：教师职业道德。</strong></p>
<p>　　教师职业道德概述、教师的职业道德规范以及教师职业道德的养成。</p>
]]></content>
      <categories>
        <category>公务员</category>
      </categories>
      <tags>
        <tag>公务员</tag>
        <tag>事业单位</tag>
      </tags>
  </entry>
  <entry>
    <title>算法序言</title>
    <url>/2021/03/21/%E7%AE%97%E6%B3%95%E5%BA%8F%E8%A8%80/</url>
    <content><![CDATA[<p>有一种观点认为，程序等于数据结构加算法，但是懂得了数据结构与算法并不一定能写出好的程序。本文主要介绍后面文章会用到的一些基本数据结构。</p>
<a id="more"></a>

<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>后面统一使用如下异常类，处理抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lei.payment.java.base.algorithm.exception;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlgorithmException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AlgorithmException</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AlgorithmException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>错误码定义类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lei.payment.java.base.algorithm.exception;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ErrorCode4Algorithm</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">ErrorCode4Algorithm</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 越界异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String INDEX_OUT_OF_RANGE = <span class="hljs-string">&quot;INDEX_OUT_OF_RANGE&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 未重写异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String NOT_IMPLEMENT_EXCEPTION = <span class="hljs-string">&quot;NOT_IMPLEMENT_EXCEPTION&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="一维节点定义"><a href="#一维节点定义" class="headerlink" title="一维节点定义"></a>一维节点定义</h2><p>所有一维单链表统一如下节点进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lei.payment.java.base.algorithm.node;<br><br><span class="hljs-keyword">import</span> lombok.*;<br><span class="hljs-keyword">import</span> lombok.experimental.SuperBuilder;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基本链表节点</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@SuperBuilder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前节点值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> T val;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指向下一个节点的指针</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ListNode next;<br>&#125;<br><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构与算法</tag>
        <tag>序言</tag>
      </tags>
  </entry>
  <entry>
    <title>考公指南</title>
    <url>/2022/02/13/%E8%80%83%E5%85%AC%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>记录考公学习过程。</p>
<a id="more"></a>

<h2 id="公务员与事业单位"><a href="#公务员与事业单位" class="headerlink" title="公务员与事业单位"></a>公务员与事业单位</h2><p><strong>公务员</strong>是指依法履行公职、纳入国家行政编制、由国家财政负担工资福利的工作人员，包括法官，检察官，政协工作人员等非国家行政机关的公职人员。</p>
<p><strong>事业单位</strong>是指国家为了社会公益目的，由国家机关举办或者其他组织利用国有资产举办的，从事教育、科研、文化、卫生、体育、新闻出版、广播电视、社会福利、救助减灾、统计调查、技术推广与实验、公用设施管理、物资仓储、监测、勘探与勘察、测绘、检验检测与鉴定、法律服务、资源管理事务、质量技术监督事务、经济监督事务、知识产权事务、公证与认证、信息与咨询、人才交流、就业服务、机关后勤服务等活动的社会服务组织。</p>
<h3 id="编制差别"><a href="#编制差别" class="headerlink" title="编制差别"></a>编制差别</h3><p><strong>公务员编制属于行政编</strong>，工资全部是财政全额拨款。多为一些各级地方人民政府，以及国务院各职能部门、地方人民政府各职能管理机构等等。</p>
<p><strong>事业单位编制大多是服务性质的单位</strong>，一般分为三种：全额事业编制、差额事业编制和自筹自支事业编制三种。</p>
<blockquote>
<p><strong>全额编制又叫全额财政拨款事业编制</strong>，完全靠财政拨款的单位，多指一些公益性事业单位和部分具有行政执法职能的事业单位，如：公办义务教育学校、交通局下属交通稽查队等等;<br><strong>差额事业编制</strong>，由财政进行差额拨款，如：公立医院、公立大学等等;</p>
<p><strong>自筹自支事业编制</strong>，多为一些服务型事业单位，如政府招待所、从事应用性研究和开发的科研单位等等。</p>
</blockquote>
<p>另外介于公务员和事业单位之间的有一个参公单位，平时在报考公务员的时候，也会看到参公的岗位，虽然不属于行政编制，但是与公务员是同岗同酬的。</p>
<h3 id="晋升空间"><a href="#晋升空间" class="headerlink" title="晋升空间"></a>晋升空间</h3><p><strong>公务员走的是职务与职级并行路线的</strong>，也就是说即使当不了领导，也能根据工作年限、资历等，享受到相关的待遇。而且领导职位一旦空出，就会有人员补充，也有一定的晋升机会。</p>
<p><strong>事业单位人员晋升基本走的是职称</strong>。事业单位分为管理岗和技术岗，晋升途径一般是分以下情况：专技岗位分为1到13级，通过职称评聘来增加工资;工勤岗位分为1到5级，通过鉴定职业资格水平来增加工资。管理岗最低为十级，专业技术岗最低为十三级，虽然专技岗说的是走职称，但是想评上中级职称还是挺难的，事业单位管理岗更不用说了，因为事业单位基本都是行政机关下面的二级单位，晋升机会非常有限。县级单位基本上管理八级就是天花板了，专技岗的小伙伴能评上中级职称基本上就是天花板了。</p>
<h3 id="福利待遇"><a href="#福利待遇" class="headerlink" title="福利待遇"></a>福利待遇</h3><p>公务员比事业单位多一个车补。一般来说，公务员享受的福利待遇比事业单位的人员要好一些。不过现在事业单位人员的工资也在不断的提升。公务员享受的保险福利是按照《国家公务员管理条例》的规定执行;事业单位人员享受的保险福利是按照国家有关的社会保障规定执行，一般要逐步实行社会化。不过事业单位和公务员岗还是要看具体的环境和岗位，一些发达地区的事业单位并不比三四线小城的公务员差。就同一地区而言，能考公务员呢，还是努力的考公务员，不管是福利待遇还是未来的发展空间，都比事业单位要大一些。</p>
<h3 id="考试差别"><a href="#考试差别" class="headerlink" title="考试差别"></a>考试差别</h3><p><strong>公务员考试</strong>一般是指国家公务员考试和地方公务员考试。国考一般是在每年的下半年举行的，一年只有一次。地方性公务员考试一般就是指省考了。</p>
<p><strong>事业单位</strong>一般是指各事业单位招聘工作人员的考试。一般是各级各单位自行组织。有国家各部委各单位的事业单位，有地方各级的事业单位。</p>
<p>考试时间也不统一，主要是集中在每年的上半年。事业单位考试的考试科目各地不同，以《公共基础知识》为主，有特殊要求的会附加各个专业的专业测试或者写作。</p>
<p>在考试内容上，公务员分别考察两个板块——<strong>行测和申论</strong>。国考的<strong>《行测》</strong>通常是130-135道题，满分是100分、<strong>《申论》</strong>通常是4-5道大题，满分100分；省考的<strong>《行测》</strong>则是120道题，满分150分、<strong>《申论》</strong>通常是4-5道大题，满分150分；而事业单位考察的是<strong>《职业能力倾向测验》</strong>和<strong>《综合应用能力》</strong>满分都是150分；</p>
<p><strong>公务员考试的题型广，题目难度更深，题量更大</strong>，与事业单位考试相比公务员考试更难一点。而且考试的机会有的时候一年只有一两次，竞争力也是非常大的。而事业单位考察的综合性的知识比较多，考试的机会相对比较多，上岸机会也更大一些。</p>
<h3 id="招录差别"><a href="#招录差别" class="headerlink" title="招录差别"></a>招录差别</h3><p><strong>国考主要招录单位</strong>是税务系统、消防系统、海关、铁路公安、海事局、银保监会、入境边防检查总站、统计局、气象局、水利工程、外交部、证监会等。</p>
<p><strong>各省省考及市考</strong>主要招录单位为公安、税务、统计、法院、检察院等系统以及市级、县级、镇级各局单位。公务员岗位大多数为社会人文科学类专业可报，基层岗位居多。</p>
<p><strong>事业单位</strong>一般是指各事业单位招聘工作人员的考试。一般是各级各单位自行组织。有国家各部委各单位的事业单位，有地方各级的事业单位。考试时间也不统一，主要是集中在每年的上半年。事业单位考试的考试科目各地不同，以《公共基础知识》为主，有特殊要求的会附加各个专业的专业测试或者写作。</p>
<h2 id="四川事业单位"><a href="#四川事业单位" class="headerlink" title="四川事业单位"></a>四川事业单位</h2><h3 id="考试时间"><a href="#考试时间" class="headerlink" title="考试时间"></a>考试时间</h3><p>四川省事业单位招聘考试每年两次，分别为上半年4月和下半年10-12月左右。2020余2021年由于疫情原因，上半年考试时间略有延迟，2022年若无疫情意外预计考试时间会在4月份。</p>
<table>
<thead>
<tr>
<th>年份</th>
<th>公告时间一</th>
<th>考试时间一</th>
<th>公告时间二</th>
<th>考试时间二</th>
</tr>
</thead>
<tbody><tr>
<td>2018</td>
<td>2018.03.09</td>
<td>2018.04.15</td>
<td>2018.10.16</td>
<td>2018.12.09</td>
</tr>
<tr>
<td>2019</td>
<td>2019.03.12</td>
<td>2019.04.27</td>
<td>2019.10.16</td>
<td>2019.12.07</td>
</tr>
<tr>
<td>2020</td>
<td>2020.05.07</td>
<td>2020.07.18</td>
<td>2020.10.23</td>
<td>2020.12.05</td>
</tr>
<tr>
<td>2021</td>
<td>2021.03.31</td>
<td>2021.05.15</td>
<td>2021.10.25</td>
<td>2021.12.04</td>
</tr>
<tr>
<td>2022</td>
<td>预计三月份</td>
<td>预计四月份</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="考试内容"><a href="#考试内容" class="headerlink" title="考试内容"></a>考试内容</h3><table>
<thead>
<tr>
<th><span style="white-space:nowrap;">考试内容</span></th>
<th>综合知识</th>
<th>公共基础知识</th>
</tr>
</thead>
<tbody><tr>
<td>考试大纲</td>
<td><strong><a href="https://www.dleis.com/2022/02/13/%E5%9B%9B%E5%B7%9D%E7%9C%81%E7%9C%81%E5%B1%9E%E4%BA%8B%E4%B8%9A%E5%8D%95%E4%BD%8D%E5%85%AC%E5%BC%80%E6%8B%9B%E8%81%98%E5%B7%A5%E4%BD%9C%E4%BA%BA%E5%91%98%E3%80%8A%E7%BB%BC%E5%90%88%E7%9F%A5%E8%AF%86%E3%80%8B%E7%AC%94%E8%AF%95%E5%A4%8D%E4%B9%A0%E5%A4%A7%E7%BA%B2/">四川省省属事业单位公开招聘工作人员《综合知识》笔试复习大纲</a></strong></td>
<td><strong><a href="https://www.dleis.com/2022/02/13/%E6%88%90%E9%83%BD%E5%B8%82%E5%B1%9E%E4%BA%8B%E4%B8%9A%E5%8D%95%E4%BD%8D%E3%80%8A%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E3%80%8B%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2/">成都市属事业单位《公共基础知识》考试大纲</a></strong></td>
</tr>
<tr>
<td><span style="white-space:nowrap;">考试题型</span></td>
<td>有判断题、单项选择题、多项选择题、判断简析题和案例分析(含阅读分析)</td>
<td>题型为单项选择题、单向选择题、多向选择题和是非判断题</td>
</tr>
<tr>
<td><span style="white-space:nowrap;">考试内容</span></td>
<td>大概可分为法律和非法律两个部分法律部分主要有：宪法、民法、刑法、民事诉讼法、劳动法及劳动合同法、道路交通安全法、治安管理处罚法等。非法律部分部分有：公民道德建设、国情省情、公文写作、事业单位常识、经济科技文化常识、时事政治。</td>
<td>法律基础、中国特色社会主义理论、马克思主义哲学、应用文写作、经济与管理、公民道德建设、科技基础知识、四川省情、成都市情、时事政治等。</td>
</tr>
<tr>
<td><span style="white-space:nowrap;">考试时间</span></td>
<td>120分钟</td>
<td>90分钟</td>
</tr>
<tr>
<td>考试分数</td>
<td>100分</td>
<td>100分</td>
</tr>
<tr>
<td>考试题量</td>
<td>90-120</td>
<td>90-120</td>
</tr>
</tbody></table>
<h3 id="考试科目"><a href="#考试科目" class="headerlink" title="考试科目"></a>考试科目</h3><table>
<thead>
<tr>
<th>考试项目</th>
<th>考试科目</th>
</tr>
</thead>
<tbody><tr>
<td>成都市属事业单位</td>
<td>《综合能力素质》+《职业能力倾向测验》</td>
</tr>
<tr>
<td>成都区县事业单位</td>
<td>《综合能力素质》+《职业能力倾向测验》</td>
</tr>
<tr>
<td>省直属事业单位</td>
<td>《综合知识》</td>
</tr>
</tbody></table>
<h3 id="考试网站"><a href="#考试网站" class="headerlink" title="考试网站"></a>考试网站</h3><p>发布招考公告：个地级市陆续发布招考公告，分别发布在个地级市人事考试网或人力资源和社会保障厅网站</p>
<table>
<thead>
<tr>
<th>常用网站</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://cdpta.cdhrss.chengdu.gov.cn:8443/netpage/index.do">成都人事考试网</a></td>
<td>成都人事考试网</td>
</tr>
<tr>
<td><a href="http://cdhrss.chengdu.gov.cn/cdrsj/index.shtml">成都人力资源和社会保障局</a></td>
<td>成都人力资源和社会保障局</td>
</tr>
<tr>
<td><a href="http://www.chinagwy.org/html/gdzk/index.html">公考资讯网</a></td>
<td>公考资讯网</td>
</tr>
</tbody></table>
<h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="综合知识"><a href="#综合知识" class="headerlink" title="综合知识"></a>综合知识</h3><p>​    </p>
]]></content>
      <categories>
        <category>公务员</category>
      </categories>
      <tags>
        <tag>公务员</tag>
        <tag>事业单位</tag>
      </tags>
  </entry>
  <entry>
    <title>队列与栈三</title>
    <url>/2021/03/27/%E9%98%9F%E5%88%97%E4%B8%8E%E6%A0%88%E4%B8%89/</url>
    <content><![CDATA[<p>栈也是一种常见的数据结构，栈的特点就是后进先出。</p>
<a id="more"></a>

<h2 id="栈的数组实现"><a href="#栈的数组实现" class="headerlink" title="栈的数组实现"></a>栈的数组实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lei.payment.java.base.algorithm.list.statck;<br><br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.AlgorithmException;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.ErrorCode4Algorithm;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.list.AbstractList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayStack</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> Object[] stack;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> DEFAULT_STACK_SIZE = <span class="hljs-number">32</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有参构造函数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size size</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayStack</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (size &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">this</span>.stack = <span class="hljs-keyword">new</span> Object[size];<br>        <span class="hljs-keyword">this</span>.size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无参构造函数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayStack</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> ArrayStack&lt;T&gt;(DEFAULT_STACK_SIZE);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">pop</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (T) stack[<span class="hljs-keyword">this</span>.size--];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T t)</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">if</span> (stack.length == <span class="hljs-keyword">this</span>.size) &#123;<br>            resize(<span class="hljs-keyword">this</span>.stack, <span class="hljs-keyword">this</span>.size + DEFAULT_STACK_SIZE);<br>        &#125;<br>        <span class="hljs-keyword">this</span>.stack[<span class="hljs-keyword">this</span>.size++] = t;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">fist</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (T) <span class="hljs-keyword">this</span>.stack[<span class="hljs-keyword">this</span>.size - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">last</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (T) <span class="hljs-keyword">this</span>.stack[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size &lt;= <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * resize stack</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> oldStack old stack</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> newSize  new size</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(Object[] oldStack, <span class="hljs-keyword">int</span> newSize)</span> </span>&#123;<br>        Object[] newStack = <span class="hljs-keyword">new</span> Object[newSize];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.size; i++) &#123;<br>            newStack[i] = oldStack[i];<br>        &#125;<br>        <span class="hljs-keyword">this</span>.stack = newStack;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="栈的链表实现"><a href="#栈的链表实现" class="headerlink" title="栈的链表实现"></a>栈的链表实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lei.payment.java.base.algorithm.list.statck;<br><br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.AlgorithmException;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.ErrorCode4Algorithm;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.list.AbstractList;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.node.ListNode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedStack</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 栈顶</span><br><span class="hljs-comment">     */</span><br>    ListNode&lt;T&gt; head;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 栈底</span><br><span class="hljs-comment">     */</span><br>    ListNode&lt;T&gt; end;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 栈大小</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedStack</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.init();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * init stack</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.head = <span class="hljs-keyword">new</span> ListNode();<br>        <span class="hljs-keyword">this</span>.head.setNext(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">this</span>.head.setVal(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">this</span>.end = <span class="hljs-keyword">this</span>.head;<br>        <span class="hljs-keyword">this</span>.size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">pop</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        ListNode&lt;T&gt; currentNode = <span class="hljs-keyword">this</span>.end;<br>        <span class="hljs-keyword">while</span> (currentNode.getNext() != <span class="hljs-keyword">this</span>.head) &#123;<br>            currentNode = currentNode.getNext();<br>        &#125;<br>        T t = <span class="hljs-keyword">this</span>.head.getVal();<br>        <span class="hljs-keyword">this</span>.head = currentNode;<br>        <span class="hljs-keyword">this</span>.size--;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T t)</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        ListNode&lt;T&gt; newNode = <span class="hljs-keyword">new</span> ListNode&lt;T&gt;();<br>        newNode.setVal(t);<br>        newNode.setNext(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">this</span>.head.setNext(newNode);<br>        <span class="hljs-keyword">this</span>.head = <span class="hljs-keyword">this</span>.head.getNext();<br>        <span class="hljs-keyword">this</span>.size++;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">fist</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.head.getVal();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">last</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.end.getVal();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.head == <span class="hljs-keyword">this</span>.end;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构与算法</tag>
        <tag>栈</tag>
        <tag>线性表</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>队列与栈一</title>
    <url>/2021/03/22/%E9%98%9F%E5%88%97%E4%B8%8E%E6%A0%88%E4%B8%80/</url>
    <content><![CDATA[<p>线性表是最基本的数据结构之一，其最终的物理结构不外乎两种，顺序表与链表。队列与栈都是线性表，只是其外在的逻辑表现形式不同而已。</p>
<a id="more"></a>

<h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>顺序表是一种在物理上连续存储的结构，也即顺序表的元素在内存空间里是物理上连续的。</p>
<div><div class="graphviz">digraph array_list{

<pre><code>bgcolor=&quot;#f7f7f7&quot;

subgraph cluster_array &#123;


    node [shape=record, fontcolor=black,width=4.75, fixedsize=true];
    pointers[] [label=&quot;&lt;p0&gt; A+0 | &lt;p1&gt; A+1 | &lt;p2&gt; A+2 | &lt;p3&gt; A+3 | &lt;p4&gt; A+4 | &lt;p5&gt; A+5 | &lt;p6&gt; A+6 | &lt;p7&gt; A+7&quot;, color=blue];
    values [label=&quot;&lt;v0&gt; A[0] | &lt;v1&gt; A[1] | &lt;v2&gt; A[2] | &lt;v3&gt; A[3] | &lt;v4&gt; A[4] | &lt;v5&gt; A[5] | &lt;v6&gt; A[6] | &lt;v7&gt; A[7]&quot;, color=blue, fillcolor=lightblue, style=filled];
    indices [label=&quot;0 | 1 | 2 | 3| 4 | 5 | 6 | 7&quot;, color=&quot;#f7f7f7&quot;];

    node [shape=plaintext, fontcolor=&quot;black&quot;,width=1 fontsize=18,fixedsize=true];
    &quot;Pointers:&quot; -&gt; &quot;Values:&quot; -&gt; &quot;Indices:&quot;[color=&quot;#f7f7f7&quot;];

    &#123; rank=same; &quot;Pointers:&quot;; pointers &#125;
    &#123; rank=same; &quot;Values:&quot;; values &#125;
    &#123; rank=same; &quot;Indices:&quot;; indices &#125;   
&#125;

label = &lt;&lt;B&gt;图 1.1 顺序表&lt;/B&gt;&gt;
</code></pre>
<p>}</div></div></p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是一种在逻辑空间上连续，但是物理空间上离散的线性表。链表前后节点使用指针相连，因此与线性表相比，链表需要更多的存储空间，但是却能更有效的利用空间，因为顺序表对存储要求必须是物理上一整块的空间。</p>
<div><div class="graphviz">digraph list_linked {
    
<pre><code>bgcolor=&quot;#f7f7f7&quot;

rankdir=LR
subgraph cluster_name &#123;
    n0 [label=&quot;&#123;&lt;data&gt;A[0]|&lt;next&gt;&#125;&quot; shape=record,color=blue,fillcolor=lightblue,style=filled]
    n1 [label=&quot;&#123;&lt;data&gt;A[1]|&lt;next&gt;&#125;&quot; shape=record,color=blue,fillcolor=lightblue,style=filled]
    n2 [label=&quot;&#123;&lt;data&gt;A[2]|&lt;next&gt;&#125;&quot; shape=record,color=blue,fillcolor=lightblue,style=filled]
    n3 [label=&quot;&#123;&lt;data&gt;A[3]|&lt;next&gt;&#125;&quot; shape=record,color=blue,fillcolor=lightblue,style=filled]
    n4 [label=&quot;&#123;&lt;data&gt;A[4]|&lt;next&gt;nil&#125;&quot; shape=record,color=blue,fillcolor=lightblue,style=filled]
 
    n0:next:0 -&gt; n1:data [tailclip=false,solid=true]
    n1:next:0 -&gt; n2:data [tailclip=false,solid=true]
    n2:next:0 -&gt; n3:data [tailclip=false,solid=true]
    n3:next:0 -&gt; n4:data [tailclip=false,solid=true]
&#125;

label=&lt;&lt;B&gt;图 2.1 链表&lt;/B&gt;&gt;
</code></pre>
<p>}</div></div></p>
<h2 id="线性表接口"><a href="#线性表接口" class="headerlink" title="线性表接口"></a>线性表接口</h2><p>线性表的基本接口，主要定义常见的几种方法，弹出元素、添加元素、线性表大小、获取线性表第一个元素、获取线性表最后一个元素以及对线性表进行判空。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lei.payment.java.base.algorithm.list.queue;<br><br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.AlgorithmException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线性表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 弹出元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 弹出元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">T <span class="hljs-title">pop</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> t 添加元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T t)</span> <span class="hljs-keyword">throws</span> AlgorithmException</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回线性表大小</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 线性表大小</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回第一个元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 第一个元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">T <span class="hljs-title">fist</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回最后一个元素</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 最后一个元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">T <span class="hljs-title">last</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否是空线性表</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否是空线性表</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> AlgorithmException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="抽象实现类"><a href="#抽象实现类" class="headerlink" title="抽象实现类"></a>抽象实现类</h2><p>统一处理异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lei.payment.java.base.algorithm.list;<br><br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.AlgorithmException;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.ErrorCode4Algorithm;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.list.queue.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">pop</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.NOT_IMPLEMENT_EXCEPTION);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T t)</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.NOT_IMPLEMENT_EXCEPTION);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.NOT_IMPLEMENT_EXCEPTION);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">fist</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.NOT_IMPLEMENT_EXCEPTION);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">last</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.NOT_IMPLEMENT_EXCEPTION);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AlgorithmException </span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.NOT_IMPLEMENT_EXCEPTION);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构与算法</tag>
        <tag>栈</tag>
        <tag>线性表</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>队列与栈二</title>
    <url>/2021/03/27/%E9%98%9F%E5%88%97%E4%B8%8E%E6%A0%88%E4%BA%8C/</url>
    <content><![CDATA[<p>队列是一种常见的数据结构，在生活中有很多应用场景，例如排队系统，常见的各种MQ基本上都算队列，队列的一个原则就是先进先出，保证了公平性。</p>
<a id="more"></a>



<h2 id="队列的数组实现"><a href="#队列的数组实现" class="headerlink" title="队列的数组实现"></a>队列的数组实现</h2><p>队列的数组实现方式如下，数组实现的有点在于每次出队都要进行大量元素的腾挪操作，非常耗时。并且当进行入队操作时，初始分配的队列长度不够的时候，需要申请一块更大的空间来腾挪旧的元素，再插入新元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lei.payment.java.base.algorithm.list.queue;<br><br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.AlgorithmException;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.ErrorCode4Algorithm;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.list.AbstractList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayQueue</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-keyword">private</span> Object[] queue;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> DEFAULT_QUEUE_SIZE = <span class="hljs-number">32</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有参构造函数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (size &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">this</span>.queue = <span class="hljs-keyword">new</span> Object[size];<br>        <span class="hljs-keyword">this</span>.size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无参构造函数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> ArrayQueue&lt;T&gt;(DEFAULT_QUEUE_SIZE);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        T t = (T) <span class="hljs-keyword">this</span>.queue[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-keyword">this</span>.size; i++) &#123;<br>            <span class="hljs-keyword">this</span>.queue[i - <span class="hljs-number">1</span>] = <span class="hljs-keyword">this</span>.queue[i];<br>        &#125;<br>        <span class="hljs-keyword">this</span>.size--;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T t)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.size == <span class="hljs-keyword">this</span>.queue.length) &#123;<br>            resize(<span class="hljs-keyword">this</span>.queue, <span class="hljs-keyword">this</span>.size + <span class="hljs-keyword">this</span>.DEFAULT_QUEUE_SIZE);<br>        &#125;<br>        <span class="hljs-keyword">this</span>.queue[<span class="hljs-keyword">this</span>.size++] = t;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">fist</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (T) <span class="hljs-keyword">this</span>.queue[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">last</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (T) <span class="hljs-keyword">this</span>.queue[<span class="hljs-keyword">this</span>.size - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size &lt;= <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * resize array</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> oldQueue old queue</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> newSize  new size</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(Object[] oldQueue, <span class="hljs-keyword">int</span> newSize)</span> </span>&#123;<br>        Object[] newQueue = <span class="hljs-keyword">new</span> Object[newSize];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.size; i++) &#123;<br>            newQueue[i] = oldQueue[i];<br>        &#125;<br>        <span class="hljs-keyword">this</span>.queue = newQueue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="队列的链式实现"><a href="#队列的链式实现" class="headerlink" title="队列的链式实现"></a>队列的链式实现</h2><p>队列的链式实现如下，链式队列适合进行频繁的插入删除操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lei.payment.java.base.algorithm.list.queue;<br><br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.AlgorithmException;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.exception.ErrorCode4Algorithm;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.list.AbstractList;<br><span class="hljs-keyword">import</span> com.lei.payment.java.base.algorithm.node.ListNode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkedQueue</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractList</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 队头</span><br><span class="hljs-comment">     */</span><br>    ListNode&lt;T&gt; head;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 队尾</span><br><span class="hljs-comment">     */</span><br>    ListNode&lt;T&gt; end;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 队列大小</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造函数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.init();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        T t = <span class="hljs-keyword">this</span>.head.getVal();<br>        <span class="hljs-keyword">this</span>.head = <span class="hljs-keyword">this</span>.head.getNext();<br>        <span class="hljs-keyword">this</span>.size--;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(T t)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.end.setVal(t);<br>        ListNode&lt;T&gt; newEnd = <span class="hljs-keyword">new</span> ListNode&lt;T&gt;();<br>        <span class="hljs-keyword">this</span>.end.setNext(newEnd);<br>        <span class="hljs-keyword">this</span>.end = <span class="hljs-keyword">this</span>.end.getNext();<br>        <span class="hljs-keyword">this</span>.size++;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * init queue</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.head = <span class="hljs-keyword">new</span> ListNode();<br>        <span class="hljs-keyword">this</span>.head.setNext(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">this</span>.head.setVal(<span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">this</span>.end = <span class="hljs-keyword">this</span>.head;<br>        <span class="hljs-keyword">this</span>.size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.size == <span class="hljs-number">0</span> || <span class="hljs-keyword">this</span>.head == <span class="hljs-keyword">this</span>.end;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">fist</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.head.getVal();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">last</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AlgorithmException(ErrorCode4Algorithm.INDEX_OUT_OF_RANGE);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.end.getVal();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据结构与算法</tag>
        <tag>栈</tag>
        <tag>线性表</tag>
        <tag>队列</tag>
      </tags>
  </entry>
</search>
